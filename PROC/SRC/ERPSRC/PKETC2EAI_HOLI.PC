/* ======================= Program Header =====================================
 PROGRAM-NAME   : pketc2eai_holi (INSA->EAI Interface Program)
 PROGRM-Decription : 결산시 배부해야하는 인건비를 계정/부서별로 전표를 생성 (EAI_HRPAY)
 Programmer     : 강륜종
 Version        : 1.00
 Date           : 2005.07.
 comments       : 명절연봉 지급당월 전용임.(계정코드 차대변 변경을 위해)
 
 << pketc2eai.pc 와 pketc2eai_holi.pc 가 크게 다른부분. >>
   decode(debityn,'1',nvl(S_AMT,0),0) debit,        
   decode(debityn,'0',nvl(S_AMT,0),0) credit,                           
 
급    여(EAI_HRPAY)     : /var/mte/adapter/conf/script/PIM/PIM.PIMFI1010B.SND.sh
         
Update Contents
   Version    date(yy.mm.dd)     programmer      description
   1.00       2005.07            강륜종         SAP 도입에 따른 EAI 인터페이스 프로그램 개발(petc2erp_holi.pc 기반으로)
============================================================================= */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <time.h>
#include "hinsa_macro.h"
#include "hinsa_string.h"
#include "hinsa_date.h"
#include "hinsa_log.h"
#include "hinsa_oracle.h"
#include "hinsa_common.h"

#define   TRUE_RET 25600

void CreateLog(void);
void InitVariables(void);
void Initialize(void);
void WriteLog(char *message);

int WriteControl(int gubun);
int WriteErpHglGl(void);


EXEC SQL INCLUDE sqlca;

EXEC SQL BEGIN DECLARE SECTION;
     char  v_dt_create[15];        /* 생성일자 */
     char  v_cd_data[4] = "C14";   /* 인건비 Data Code */
     int   v_no_crt_srl = 0;       /* 생성 일련번호 */
     char  v_ym_acct[7];           /* 회계년월 */
     char  v_paydate[8+1];         /* 지급일 __단기계약직 임금 전용시 사용  */
     int   v_cnt_line = 0;         /* Line건수 */
     char  v_ph_proc[2] = "A";     /* 처리단계 */
     char  v_st_proc[2] = "P";     /* 처리상태 (P:Processing, N:Normal Termination, A:Abnormal Termination) */
     char  v_cl_data_use[2] = "A"; /* Data 활용구분 */
     char  v_id_crt_user[5];       /* 생성 UserID */
     char  str[40800];
     char  sqlstr[40800];
     char  sqlstr1[40800];
     char  v_rst_validation[2] = "A";
     
     /******************************************************************************
       CONST Variables
     ******************************************************************************/
     char   v_currency[4]  = "KRW";   /*화폐명*/
     char   v_corpcode[3]  = "10";    /*회사코드 하나로통신(주)*/
     char   v_activity[6]  = "00000"; /*기능(활동)*/
     double v_amt_tot      = 0;       /* total 금액*/
EXEC SQL END   DECLARE SECTION;

/******************************************************************************
  Other Variables
******************************************************************************/
char  *HOMEDIR;
char  logfile[40];
char  logfile_fullname[140];
int   id;
char  buff[1000];
char  arg_writeman[4+1];    /* 작업자   */
int   v_gubun      = 0;     /* 작업구분 */

char  log_rundate[16]     = ""; 
char  log_progid[16]      = "";
char  log_writeman[5]     = "";
char  log_buff[100]       = "";
int   seqno = 0; 

/***** Log File Pointer *****/
FILE *fp;

void main(int argc, char *argv[])
{
     int  ret;
     
     if  (argc != 7) 
     {    /* pketc2eai_holi 200508 20050831 2 D006 pketc2eai_holi 2005083100000 */
          printf("[Usage] : pketc2eai_holi 1.회계년월(YYYYMM) 2.회계일자;지급일 __단기계약직 임금 전용시 사용   \n");
          printf("[Usage] :               3. 구분[1.퇴직급여 C13, 2.미지급 C14, 3.일용직 C15 ] 4.작업자 5.progid 6.시작시간\n");
          fclose(fp);
          exit(1);     
     }
     
     memset(v_ym_acct, NULL, sizeof(v_ym_acct));
     memset(v_paydate, NULL, sizeof(v_paydate));
     memset(arg_writeman, NULL, sizeof(arg_writeman));
     
     sprintf(v_ym_acct, "%s", argv[1]);
     sprintf(v_paydate, "%s", argv[2]);
     v_gubun = atoi(argv[3]);
     sprintf(arg_writeman, "%s", argv[4]);
     
     /* DB_connect */
     hinsa_log_print(0,"계정/부서별로 전표를 생성 시작...");                
     hinsa_db_connect();  /*DB Connect 실시..*/
     
     strcpy(log_writeman, argv[4]);
     strcpy(log_progid,   argv[5]);
     strcpy(log_rundate,  argv[6]);  
      
     EXEC SQL DECLARE log_db DATABASE;    
     hinsa_log_db_connect();
     /*========================================================*/
     
     InitVariables();   /* 변수 초기화 */
     
     Initialize();       /* 초기화 루틴 */
     
     CreateLog();        /* 화일 open */
     
     sprintf(buff, "회계년도 : %s\n", argv[1]);
     WriteLog(buff);
     sprintf(buff, "지급일 : %s\n", argv[2]);
     WriteLog(buff);
     sprintf(buff, "작업자사번 : %s\n", argv[4]);
     WriteLog(buff);
     sprintf(buff, "프로그램명 : %s\n", argv[5]);
     WriteLog(buff);
      
     sprintf(v_id_crt_user, argv[4]);  /* 작업자사번 */
     
     printf("작업 시작......................................... >\n");  
     
     if  (WriteControl(0) == -1) 
     {    /* 초기값 세팅 */
          fclose(fp);
          exit(1);
     }
     
     if  (WriteErpHglGl() == -1)
     {
          sprintf(log_buff, "ERROR ====== [작업 실패] =====\n");
          Write_batlog(seqno++, log_buff);   
          WriteControl(2);             /* 비정상종료 */
          error_quit("ERROR ====== [작업 실패] =====\n");   /*Dsa2000*/
     }        
     else
     {
          sprintf(log_buff, "OK ====== [작업 완료] =====\n");
          Write_batlog(seqno++, log_buff);   
          WriteControl(1);              /* 정상종료 */  
          hinsa_exit(0,"OK ====== [작업 완료] =====\n");   /*Dsa2000*/
     }
     
     fclose(fp);
}
/****************************************************************************************/

void InitVariables(void)
{
    memset(logfile, NULL, sizeof(logfile));
    memset(logfile_fullname, NULL, sizeof(logfile_fullname));
    memset(v_dt_create, NULL, sizeof(v_dt_create));
    memset(v_cd_data, NULL, sizeof(v_cd_data));
}

void Initialize(void)
{
    EXEC SQL
    SELECT  TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') DT_CREATE
      INTO  :v_dt_create
      FROM  DUAL;
    
    if  (sqlca.sqlcode != 0)
    {   
         printf("ORA-%05d - 현재날짜 가져오기  Error\n", sqlca.sqlcode);
         fclose(fp);
         exit(1);
    }
    
    if      ( v_gubun == 1 )  sprintf(v_cd_data,"C13");
    else if ( v_gubun == 2 )  sprintf(v_cd_data,"C14");
    else if ( v_gubun == 3 )  sprintf(v_cd_data,"C15");
    
    EXEC SQL
    SELECT NVL(MAX(NO_CRT_SRL)+1,1)
      INTO :v_no_crt_srl
      FROM EAI_HRPAY
     WHERE H_YEAR||LPad(H_MONTH,2,'0') = :v_ym_acct
       AND CD_DATA = :v_cd_data;
    
    if  ((sqlca.sqlcode != 0) && (sqlca.sqlcode != -1403) && (sqlca.sqlcode != -1405)) 
    {   
         printf("ORA-%05d - MAX Serial# 가져오기  Error\n", sqlca.sqlcode);
         sprintf(log_buff, "ORA-%05d - MAX Serial# 가져오기  Error\n", sqlca.sqlcode);
         Write_batlog(seqno++, log_buff);   
         fclose(fp);
         exit(1);
    }     
}

void CreateLog()
{  
     HOMEDIR = hinsa_home();
     strcat(HOMEDIR,"/log/ERPlog/");
     
     /* 로그파일명을 세팅 */
     sprintf(logfile_fullname, "%spetc2eai_holi%.8s%02d.log", HOMEDIR, v_dt_create, v_no_crt_srl);
     
     /* 로그파일 오픈 */
     fp = fopen(logfile_fullname, "w+");
     
     if (fp == NULL) {
         printf("로그파일오픈(%s) 에러\n", logfile_fullname);
         exit(1);
     }
}

void WriteLog(char *message)
{
     fprintf(fp, "%s", message);
}

int  WriteControl(int gubun)
{    
     sprintf(buff, "< WriteControl Starting (Gubun : %d) >----------------\n", gubun);
     WriteLog(buff);
     
     if      (gubun == 1)  sprintf(v_st_proc, "N");
     else if (gubun == 2)  sprintf(v_st_proc, "A");
     
     sprintf(buff, "v_dt_create  : (%s)\n", v_dt_create);
     WriteLog(buff);
     sprintf(buff, "v_cd_data    : (%s)\n", v_cd_data);
     WriteLog(buff);
     sprintf(buff, "v_no_crt_srl : (%d)\n", v_no_crt_srl);
     WriteLog(buff);
     sprintf(buff, "v_ym_acct    : (%s)\n", v_ym_acct);
     WriteLog(buff);
     sprintf(buff, "v_ph_proc    : (%s)\n", v_ph_proc);
     WriteLog(buff);
     sprintf(buff, "v_st_proc    : (%s)\n", v_st_proc);
     WriteLog(buff);
     sprintf(buff, "v_cl_data_use: (%s)\n", v_cl_data_use);
     WriteLog(buff);
     sprintf(buff, "v_id_crt_user: (%s)\n", v_id_crt_user);
     WriteLog(buff);
     sprintf(buff, "v_cnt_line   : (%d)\n", v_cnt_line);
     WriteLog(buff);
     
     if  (gubun == 1) 
     {   
          printf(" =========================================================== \n");
          printf("                  [ 작  업  결  과 ]                         \n");
          printf("  작업일 :[%s] 자료구분[%s] 일련번호[%d]   \n", v_dt_create,v_cd_data,v_no_crt_srl);
          printf(" =========================================================== \n");
          printf("      건 수                                      총 액     \n");
          printf("        %-4d                                  %-15.0f \n",v_cnt_line,v_amt_tot);
          printf(" =========================================================== \n");
          WriteLog("OK!! < Program ended successfully.......................... >\n");
          
          sprintf(log_buff, " =========================================================== \n");
          Write_batlog(seqno++, log_buff);   
          sprintf(log_buff, "                           작업결과                          \n");
          Write_batlog(seqno++, log_buff);   
          sprintf(log_buff, "  작업일 :[%s] 자료구분[%s] 일련번호[%d]   \n", v_dt_create,v_cd_data,v_no_crt_srl);
          Write_batlog(seqno++, log_buff);   
          sprintf(log_buff, " =========================================================== \n");
          Write_batlog(seqno++, log_buff);   
          sprintf(log_buff, "      건 수                                      총 액     \n");
          Write_batlog(seqno++, log_buff);   
          sprintf(log_buff, "        %-4d                                  %-15.0f \n",v_cnt_line,v_amt_tot);
          Write_batlog(seqno++, log_buff);   
          sprintf(log_buff, " =========================================================== \n");
          Write_batlog(seqno++, log_buff);   
          sprintf(log_buff, "OK!! < Program ended successfully.......................... >\n");
          Write_batlog(seqno++, log_buff);   
     } 
     else if (gubun == 2) 
     {
          printf("Fail!! < Program failed......................%d > \n", sqlca.sqlcode);
          WriteLog("Fail!! < Program failed.........................................>\n");
          sprintf(log_buff, "Fail!! < Program failed......................%d > \n", sqlca.sqlcode);
          Write_batlog(seqno++, log_buff);      
     }
     return(0);  
}

/*  Let's   writing  insa's log table */
int  WriteErpHglGl(void)
{    
     sprintf(buff,"< WriteErpHgl%s Starting >-------------------------------\n" ,v_cd_data);                    
     WriteLog(buff);
     sprintf(buff, "v_dt_create      : (%s)\n", v_dt_create);
     WriteLog(buff);                
     sprintf(buff, "v_cd_data        : (%s)\n", v_cd_data);
     WriteLog(buff);                
     sprintf(buff, "v_no_crt_srl     : (%d)\n", v_no_crt_srl);
     WriteLog(buff);
     sprintf(buff, "v_rst_validation : (%s)\n", v_rst_validation);
     WriteLog(buff);
           
     memset(str,'\0',sizeof(str));
     memset(sqlstr,'\0',sizeof(sqlstr));
     /*
     printf("v_corpcode               : %s \n", v_corpcode);                                         
     printf("v_ym_acct    회계년월    : %s \n", v_ym_acct);
     printf("v_cd_data    데이터 구분 : %s \n", v_cd_data);
     printf("v_no_crt_srl 생성일련번호: %d \n", v_no_crt_srl);
     printf("v_dt_create              : %s \n", v_dt_create);
     printf("v_paydate                : %s \n", v_paydate);
     printf("v_currency               : %s \n", v_currency);
     printf("v_activity               : %s \n", v_activity);  */   
      
     EXEC SQL 
     INSERT INTO EAI_HRPAY (  /* Write TEMP Pkmpcalc Table */
            SEGMENT1        ,
            H_YEAR          ,
            H_MONTH         ,
            MODULE_GU       ,
            CD_DATA         ,
            NO_CRT_SRL      ,
            NO_LINE         ,
            IFSYS           ,
            DT_CREATE       ,
            HEADER_NAME     ,
            DT_ACCOUNTING   ,
            CURRENCY        ,
            SEGMENT4        ,
            SEGMENT2        ,
            DEPTCODE        ,
            SEGMENT3        ,
            ENTERED_DR      ,
            ENTERED_CR      ,
            MODE_FLAG       ,
            EAI_FLAG        ,
            EAI_DATE        )
     SELECT                                      
            :v_corpcode,                                         
            SUBSTR(:v_ym_acct,1,4),
            SUBSTR(:v_ym_acct,5,2),
            'GL' MODULE_GU,
            :v_cd_data,
            :v_no_crt_srl,
            rownum,
            'HR' IFSYS,
            :v_dt_create,
            :v_cd_data||substr(:v_paydate,1,6)||HEADER_NAME,
            TO_DATE(:v_paydate, 'YYYYMMDD'), 
            :v_currency,
            A.accno,
            fincode,
            deptcode, /*dsa2000 2005.10 부서코드 추가.*/
            :v_activity,
            decode(debityn,'1',nvl(S_AMT,0),0) debit,
            decode(debityn,'0',nvl(S_AMT,0),0) credit,
            'I'      MODE_FLAG  ,  /*EAI추출구분(I,U,D)*/
            'N'      EAI_FLAG   ,  /*EAI추출여부*/
            null     EAI_DATE      /*EAI추출시간*/         
       FROM V_ERP A,  ERP_ACCNO B
      WHERE A.ACCNO = B.ACCNO;
     
     if  (sqlca.sqlcode != 0) 
     {    /* 에러이면 */
          printf("Table_name : EAI_HRPAY \n");
          sprintf(log_buff, "ORA-%05d - Insert TEMP 임시테이블 Error--------\n", sqlca.sqlcode);
          WriteLog(log_buff);
          Write_batlog(seqno++, log_buff);   
          return(-1);
     } 
     else 
     {    /* 에러가 아니면 */
          v_cnt_line = sqlca.sqlerrd[2];
          WriteLog("Insert TEMP 임시테이블 Success\n");
          sprintf(log_buff, "Process Count : %d\n", v_cnt_line);
          WriteLog(log_buff);
          Write_batlog(seqno++, log_buff);   
     }
     
     /******************************************************************************************/
     v_amt_tot = 0;
     
     memset(str,'\0',sizeof(str));
     memset(sqlstr,'\0',sizeof(sqlstr));
     
     sprintf(sqlstr,  "SELECT SUM(ENTERED_DR)                    \
                         FROM EAI_HRPAY                          \
                        WHERE H_YEAR||LPad(H_MONTH,2,'0') = '%s' \
                          AND CD_DATA    = '%s'                  \
                          AND NO_CRT_SRL = %d "                  , v_ym_acct, v_cd_data, v_no_crt_srl);
       
     EXEC SQL PREPARE S FROM :sqlstr;
     EXEC SQL DECLARE C CURSOR FOR S;
     EXEC SQL OPEN C ;
     EXEC SQL FETCH C INTO :v_amt_tot;       /* printf("\n--- %f  \n",v_amt_tot); */
     
     sprintf(str,"\n select sqltext => %s",sqlstr);
     WriteLog(str);
     WriteLog("< Write 인건비 Ending >-------------------------\n");
     return(0);  
}

/*=== dsa2000 2004.10. Rexec대체 서비스를 위한 Write_batlog()  ===================*/
int  Write_batlog(int seqno, char *message)
{ 
     EXEC SQL AT log_db 
     INSERT INTO PYBATLOG
     VALUES (:log_rundate, :log_progid, :seqno, :log_writeman, :message);

     if ((sqlca.sqlcode != 1403) && (sqlca.sqlcode != 0)) 
     { 
          printf("ERROR_CODE : %d, pybatlog Insert Error. \n", sqlca.sqlcode);
          return(-1);
     }                        
                        
     EXEC SQL AT log_db COMMIT WORK ; 
}