/* ======================= Program Header =====================================
 PROGRAM-NAME      : PETC2ERP_HOLI (INSA->ERP Interface Program)
 PROGRM-Decription : 결산시 배부해야하는 인건비를 계정/부서별로 전표를 생성
                     --> 명절연봉 지급월 전용...
 USAGE          : petc2erp_holi DBUserID 작업자사번 회계년월
                                작업구분[1.퇴직급여,2.미지급,3.일용직]
 SYSTEM-NAME    : 급여
 SUBSYSTEM-NAME : 급여
 Programmer     : 유효성
 Version        : 1.00
 Date           : 2001.04.04

comments : 명절연봉 지급당월 전용임.(계정코드 차대변 변경을 위해)
	/*petc2erp.pc 와 petc2erp_holi.pc 가 크게 다른부분. */
        /*decode(debityn,'1',nvl(S_AMT,0),0) debit,        
          decode(debityn,'0',nvl(S_AMT,0),0) credit,       /              
          
Update Contents
   Version    date(yy.mm.dd)     programmer    description
   1.00       2001.04.04         유효성        최초작성
   1.00       2002.03.21         유효성        신재무시스템으로 변경 (ERP->HAIS) 
   1.01       2004.02.19         강륜종        Oracle8i 업그레이드에 의한 관련 라이브러리 업그레이드.   
   1.02       2004.04.26         강륜종        MIS2 장비에 맞게 경로 및 환경 설정...   
                                              EXEC SQL ROLLBACK WORK; EXEC SQL COMMIT WORK;  주석처리...
   10.00      2004.11.         강륜종(dsa2000) Rexec대체 서비스를 위한 수정작업.                                              
 ============================================================================= */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <time.h>
#include "hinsa_macro.h"
#include "hinsa_string.h"
#include "hinsa_date.h"
#include "hinsa_log.h"
#include "hinsa_oracle.h"
#include "hinsa_common.h"

void CreateLog(void);
void InitVariables(void);
void Initialize(void);
void DeleteTmp(void);
void WriteLog(char *message);

int WriteControl(int gubun);
int WriteErpHglGl(void);


EXEC SQL INCLUDE sqlca;

EXEC SQL BEGIN DECLARE SECTION;

/****************************************************************************** 
  Interface Control Table Variables
******************************************************************************/
char	v_dt_create[9];			/* 생성일자 */
char	v_cd_data[5] = "GL09";		/* 인건비 Data Code */
int	v_no_crt_srl = 0;		/* 생성 일련번호 */
char	v_ym_acct[7];			/* 회계년월 */
char	v_paydate[8+1];                 /* 지급일 __단기계약직 임금 전용시 사용  */
int	v_cnt_line = 0;			/* Line건수 */
char	v_ph_proc[2] = "A";		/* 처리단계 */
char	v_st_proc[2] = "P";		/* 처리상태 (P:Processing, N:Normal Termination, A:Abnormal Termination) */
char	v_cl_data_use[2] = "A";		/* Data 활용구분 */
char	v_id_crt_user[5];		/* 생성 UserID */
char    str[40800];
char    sqlstr[40800];
char    sqlstr1[40800];
/******************************************************************************
  Interface Table Variables
******************************************************************************/
char	v_rst_validation[2] = "A";

/******************************************************************************
  CONST Variables
******************************************************************************/
char	v_currency[4]	= "KRW";	/*화폐명*/
char	v_corpcode[3]	= "10";		/*회사코드 하나로통신(주)*/
char	v_activity[6]	= "00000";	/*기능(활동)*/
char	v_service[5]	= "0000";	/*서비스*/
char	v_method[2]	= "0";		/*매체*/
char	v_customer[3]	= "00";		/*고객군*/
char	v_tele[4]	= "000";	/*전화국*/
char	v_outaccount[31]= "414-11-00112-0(당좌수표)";	
		/*출금계좌번호 not used  변경시 erp_accno의 acntno를 바꾼다.*/
double	v_amt_tot	= 0;		/* total 금액*/

EXEC SQL END   DECLARE SECTION;

/******************************************************************************
  Other Variables
******************************************************************************/
/*char	logdir[100] = "/hper/insa/ERP/log/";*/
char    *HOMEDIR;
char	logfile[40];
char	logfile_fullname[140];
int	id;
char	buff[1000];
char	arg_writeman[4+1];    /* 작업자   */
int     v_gubun      = 0;     /* 작업구분 */

/*=== dsa2000 2004.11. Rexec대체 서비스를 위한 =============*/
char    log_rundate[16]     = ""; 
char    log_progid[16]      = "";
char    log_writeman[5]     = "";
char    log_buff[100]       = "";
int     seqno = 0; 

/***** Log File Pointer *****/
FILE *fp;

void main(int argc, char *argv[])
{
	/* printf("Program Start......................................... >\n");  */
	if (argc != 7) {  /* petc2erp_holi 200312 20031231 1 D006 petc2erp_holi 2004110100000 */
	   printf("[Usage] : petc2erp_holi 1.회계년월(YYYYMM) 2.회계일자;지급일 __단기계약직 임금 전용시 사용   \n");
	   printf("[Usage] :               3. 구분[1.퇴직급여 GL13, 2.미지급 GL14, 3.일용직 GL15 ] \n");
	   printf("[Usage] :               4.작업자 5.progid 6.시작시간\n");
	   fclose(fp);
	   exit(1);	   
	}

	memset(v_ym_acct, NULL, sizeof(v_ym_acct));
	memset(v_paydate, NULL, sizeof(v_paydate));
	memset(arg_writeman, NULL, sizeof(arg_writeman));
	
	sprintf(v_ym_acct, "%s", argv[1]);
	sprintf(v_paydate, "%s", argv[2]);
	v_gubun = atoi(argv[3]);
	sprintf(arg_writeman, "%s", argv[4]);

	/* Dsa2000  2004.02.23.	**********************************/
	/* DB_connect(id,0); */
	hinsa_log_print(0,"계정/부서별로 전표를 생성 시작...");                
        hinsa_db_connect();  /*DB Connect 실시..*/
	/*dsa2000  수정..End......................................*/

	/*=== dsa2000 2004.11. Rexec대체 서비스를 위한 =============*/
	strcpy(log_writeman, argv[4]);
	strcpy(log_progid,   argv[5]);
	strcpy(log_rundate,  argv[6]);	
		
	EXEC SQL DECLARE log_db DATABASE;    
	hinsa_log_db_connect();
	/*========================================================*/
	
	InitVariables();		/* 변수 초기화 */
	Initialize();			/* 초기화 루틴 */

	CreateLog();                    /* 화일 open */

        sprintf(buff, "회계년도 : %s\n", argv[1]);
	WriteLog(buff);
	sprintf(buff, "지급일 : %s\n", argv[2]);
	WriteLog(buff);
	sprintf(buff, "작업자사번 : %s\n", argv[4]);
	WriteLog(buff);
	sprintf(buff, "프로그램명 : %s\n", argv[5]);
	WriteLog(buff);
		
	sprintf(v_id_crt_user, argv[4]);	/* 작업자사번 */

/* 
	InitVariables();		* 변수 초기화 *
	Initialize();			* 초기화 루틴 *
	DeleteTmp();   */
	printf("작업 시작......................................... >\n");	

	if (WriteControl(0) == -1) {		/* 초기값 세팅 */
		fclose(fp);
		exit(1);
	}

	if (WriteErpHglGl() == -1)
	{
		sprintf(log_buff, "ERROR ====== [작업 실패] =====\n");
           	Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
		WriteControl(2);	/* 비정상종료 */
		error_quit("ERROR ====== [작업 실패] =====\n");		/*Dsa2000 Rollback*/
	}        
        else
        {
        	sprintf(log_buff, "OK ====== [작업 완료] =====\n");
           	Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
        	WriteControl(1); 	/* 정상종료 */	
		hinsa_exit(0,"OK ====== [작업 완료] =====\n");		/*Dsa2000 Commit */
	}

	fclose(fp);
}

void CreateLog()
{	/*2004.04.26 logdir => HOMEDIR*/
	HOMEDIR = hinsa_home();
	strcat(HOMEDIR,"/log/ERPlog/");
	
	/* 로그파일명을 세팅 */
	sprintf(logfile_fullname, "%spetc2erp_holi%s%02d.log", HOMEDIR, v_dt_create, v_no_crt_srl);
	/* 로그파일 오픈 */
	fp = fopen(logfile_fullname, "w+");

	if (fp == NULL) {
		printf("로그파일오픈(%s) 에러\n", logfile_fullname);
		exit(1);
	}
}

void InitVariables(void)
{
	memset(logfile, NULL, sizeof(logfile));
	memset(logfile_fullname, NULL, sizeof(logfile_fullname));

	memset(v_dt_create, NULL, sizeof(v_dt_create));
	memset(v_ym_acct, NULL, sizeof(v_ym_acct));
}

void Initialize(void)
{
	EXEC SQL
	SELECT	TO_CHAR(SYSDATE, 'YYYYMMDD') DT_CREATE,
		TO_CHAR(SYSDATE, 'YYYYMM') YM_ACCT
	INTO
		:v_dt_create, :v_ym_acct
	FROM	DUAL;

	if (strcmp(v_ym_acct, "000000") != 0)
		sprintf(v_ym_acct, "%s", v_ym_acct);

	if (sqlca.sqlcode != 0)
	{
		printf("ORA-%05d - 현재날짜 가져오기  Error\n", sqlca.sqlcode);
		fclose(fp);
		exit(1);
	}

        if ( v_gubun == 1 )
        {
            sprintf(v_cd_data,"GL13");
        }
        else if ( v_gubun == 2 )
        {
            sprintf(v_cd_data,"GL14");
        }
        else if ( v_gubun == 3 )
        {
            sprintf(v_cd_data,"GL15");
        }

	EXEC SQL
	SELECT	MAX(NO_CRT_SRL)
	INTO	:v_no_crt_srl
	FROM	HIT_CTRL@HAIS   /*  FROM	HIT_CTRL_TEST   /* 테스트시에 사용 */
	WHERE	DT_CREATE = TO_DATE(:v_dt_create, 'YYYYMMDD')
	  AND	CD_DATA = :v_cd_data;

	if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != -1403) && (sqlca.sqlcode != -1405)) {
		printf("ORA-%05d - MAX Serial# 가져오기  Error\n", sqlca.sqlcode);
		fclose(fp);
		exit(1);
	}
	v_no_crt_srl++ ;	/* 현재날짜의 생성일련번호 + 1 */
}

void WriteLog(char *message)
{
	fprintf(fp, "%s", message);
}

void DeleteTmp(void)
{
	sprintf(buff, "< DeleteTmp Starting >----------------\n");
	WriteLog(buff);
	/* TEMP Table에서 3년이상 이상 */
	/* 지난 데이타는 삭제한다.     */
        
        memset(str,'\0',sizeof(str));
        memset(sqlstr,'\0',sizeof(sqlstr));

        sprintf(sqlstr,
	"DELETE FROM ERP_HGL_%s \
	WHERE DT_CREATE < ADD_MONTHS(SYSDATE,-36)",v_cd_data);
        
        EXEC SQL PREPARE S_del FROM :sqlstr;

        EXEC SQL EXECUTE S_del;

        /*printf("delete sql => %s",sqlstr);
	EXEC SQL COMMIT WORK;*/

	if (sqlca.sqlcode != 0)
	{
		printf("Fail!! < Program failed......... %s >\n", sqlca.sqlcode);
		sprintf(log_buff, "ORA-%05d - 임시테이블삭제 Error\n", sqlca.sqlcode);
		WriteLog(log_buff);
           	Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
		fclose(fp);
		exit(1);
	}

	sprintf(buff, "< DeleteTmp Ending >----------------\n");
	WriteLog(buff);
}

int WriteControl(int gubun)
{
	sprintf(buff, "< WriteControl Starting (Gubun : %d) >----------------\n", gubun);
	WriteLog(buff);
	if (gubun == 1)
		sprintf(v_st_proc, "N");
	else if (gubun == 2)
		sprintf(v_st_proc, "A");

	sprintf(buff, "v_dt_create : (%s)\n", v_dt_create);
	WriteLog(buff);
	sprintf(buff, "v_cd_data : (%s)\n", v_cd_data);
	WriteLog(buff);
	sprintf(buff, "v_no_crt_srl : (%d)\n", v_no_crt_srl);
	WriteLog(buff);
	sprintf(buff, "v_ym_acct : (%s)\n", v_ym_acct);
	WriteLog(buff);
	sprintf(buff, "v_ph_proc : (%s)\n", v_ph_proc);
	WriteLog(buff);
	sprintf(buff, "v_st_proc : (%s)\n", v_st_proc);
	WriteLog(buff);
	sprintf(buff, "v_cl_data_use : (%s)\n", v_cl_data_use);
	WriteLog(buff);
	sprintf(buff, "v_id_crt_user : (%s)\n", v_id_crt_user);
	WriteLog(buff);
	sprintf(buff, "v_cnt_line : (%d)\n", v_cnt_line);
	WriteLog(buff);

	if (gubun == 0) {	/* 작업시작시 Control Table Insert */

		EXEC SQL
		INSERT INTO HIT_CTRL@HAIS   /* 	INSERT INTO HIT_CTRL_TEST   /* 테스트시에 사용 */
			(DT_CREATE, CD_DATA, NO_CRT_SRL, YM_ACCT,
			PH_PROC,                            
			ST_PROC,                            
			CL_DATA_USE,                        
			ID_CRT_USER)                        
		VALUES	(TO_DATE(:v_dt_create, 'YYYYMMDD'), 
			:v_cd_data, :v_no_crt_srl, :v_ym_acct,
			:v_ph_proc, :v_st_proc,             
			:v_cl_data_use,                     
			:v_id_crt_user);                    
                            
	} else if (gubun == 1) {	/* 정상종료시 Control Table Update */
		EXEC SQL
		UPDATE	HIT_CTRL@HAIS   /* 	UPDATE	HIT_CTRL_TEST   /* 테스트시에 사용 */
		SET	CNT_LINE = :v_cnt_line,		/* 처리건수 */
			AMT_TOT  = :v_amt_tot,		/* TOTAL 금액 */
			ST_PROC  = :v_st_proc,		/* 처리상태 "N" */
			DT_CRT_COMP = SYSDATE		/* 작업완료일자 */
		WHERE	DT_CREATE = TO_DATE(:v_dt_create, 'YYYYMMDD')
		  AND	CD_DATA = :v_cd_data
		  AND	NO_CRT_SRL = :v_no_crt_srl;

	} else if (gubun == 2) {	/* 비정상종료시 Control Table Update */
		EXEC SQL
		UPDATE	HIT_CTRL@HAIS   /* 	UPDATE	HIT_CTRL_TEST   /* 테스트시에 사용 */
		SET	ST_PROC   = :v_st_proc	/* 처리상태를 "A"로 세팅 */
		WHERE	DT_CREATE = TO_DATE(:v_dt_create, 'YYYYMMDD')
		  AND	CD_DATA   = :v_cd_data
		  AND	NO_CRT_SRL = :v_no_crt_srl;
	}

	if (sqlca.sqlcode != 0) {
		sprintf(log_buff, "ORA-%05d - Control Table Error ( Gubun : %d )\n",sqlca.sqlcode, gubun);
		WriteLog(log_buff);
           	Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/

		/*EXEC SQL ROLLBACK WORK;*/
		printf("v_dt_create   : %s\n", v_dt_create);
		printf("v_cd_data     : %s\n", v_cd_data);
		printf("v_no_crt_srl  : %d\n", v_no_crt_srl);
		printf("v_ym_acct     : %s\n", v_ym_acct);
		printf("v_ph_proc     : %s\n", v_ph_proc);
		printf("v_st_proc     : %s\n", v_st_proc);
		printf("v_cl_data_use : %s\n", v_cl_data_use);
		printf("v_id_crt_user : %s\n", v_id_crt_user);		

		printf("Fail Program failed......................................... >\n");
		return(-1);
	} else {
		sprintf(log_buff, "< WriteControl Ending (Gubun : %d) >------------------\n", gubun);
		WriteLog(log_buff);

		/*EXEC SQL COMMIT WORK;*/

		if (gubun == 1) { 
			printf(" =========================================================== \n");
			printf("                  [ 작  업  결  과 ]                         \n");
			printf("  작업일 :[%s] 자료구분[%s] 일련번호[%d]   \n", v_dt_create,v_cd_data,v_no_crt_srl);
			printf(" =========================================================== \n");
			printf("      건 수                                   총 액          \n");
			printf("        %-4d                                  %-15.0f \n",v_cnt_line,v_amt_tot);
			printf(" =========================================================== \n");
			WriteLog("OK!! < Program ended successfully.......................... >\n");
			
			sprintf(log_buff, " =========================================================== \n");
			Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
			sprintf(log_buff, "                  [ 작  업  결  과 ]                         \n");
			Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
			sprintf(log_buff, "  작업일 :[%s] 자료구분[%s] 일련번호[%d]   \n", v_dt_create,v_cd_data,v_no_crt_srl);
			Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
			sprintf(log_buff, " =========================================================== \n");
			Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
			sprintf(log_buff, "      건 수                                   총 액          \n");
			Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
			sprintf(log_buff, "        %-4d                                  %-15.0f \n",v_cnt_line,v_amt_tot);
			Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
			sprintf(log_buff, " =========================================================== \n");
			Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
			WriteLog("OK!! < Program ended successfully.......................... >\n");
			Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
		} else if (gubun == 2) {
			printf("Fail!! < Program failed.........................%d > \n", sqlca.sqlcode);
			WriteLog("Fail!! < Program failed.........................................>\n");
			sprintf(log_buff, "Fail!! < Program failed.........................%d > \n", sqlca.sqlcode);
			Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
		}
		return(0);
	}
}

/*  Let's   writing  insa's log table */
int WriteErpHglGl(void)
{
	sprintf(buff,"< WriteErpHgl%s Starting >-------------------------------\n"
                    ,v_cd_data);                    
	WriteLog(buff);
	sprintf(buff, "v_dt_create : (%s)\n", v_dt_create);
	WriteLog(buff);
	sprintf(buff, "v_cd_data : (%s)\n", v_cd_data);
	WriteLog(buff);
	sprintf(buff, "v_no_crt_srl : (%d)\n", v_no_crt_srl);
	WriteLog(buff);
	sprintf(buff, "v_rst_validation : (%s)\n", v_rst_validation);
	WriteLog(buff);
        
        /* Write TEMP Pkmpcalc Table */

        memset(str,'\0',sizeof(str));
        memset(sqlstr,'\0',sizeof(sqlstr));

	sprintf(sqlstr,
  	" INSERT INTO ERP_HGL_%s (                             \
	      DT_CREATE,  CD_DATA,   NO_CRT_SRL,  HEADER_NAME, \
	      DT_ACCOUNTING, NO_LINE, CURRENCY,                \
	      SEGMENT1, SEGMENT2, SEGMENT3, SEGMENT4,          \
	      SEGMENT5, SEGMENT6, SEGMENT7,SEGMENT8,           \
	      ENTERED_DR, ENTERED_CR, OUT_ACCOUNT,             \
	      RST_VALIDATION )                                 \
    	SELECT TO_DATE('%s', 'YYYYMMDD') DT_CREATE,            \
              '%s' CD_DATA,	                               \
              %d no_crt_srl,                                   \
              '%s'||'-'||'%s'||'-'||HEADER_NAME HEADER_NAME,   \
              TO_DATE('%s', 'YYYYMMDD') PAYDATE,               \
              rownum,                                          \
              '%s' CURRENCY,                                   \
              '%s' CORPCODE,                                   \
              fincode,                                         \
              ACTIVITY,                                        \
              A.ACCNO,                                         \
              '%s' SERVICE,                                    \
              '%s' METHOD,                                     \
              '%s' CUSTOMER,                                   \
              '%s' TELE,                                       \
              decode(debityn,'1',nvl(S_AMT,0),0) debit,        \
              decode(debityn,'0',nvl(S_AMT,0),0) credit,       \
              ACNTNO,                                          \
              '%s' RST_VALIDATION                              \
       FROM   v_ERP A,  ERP_ACCNO B                            \
      WHERE   A.ACCNO = B.ACCNO  ",                            \
      v_cd_data  ,v_dt_create,v_cd_data,v_no_crt_srl,          \
      v_cd_data  ,v_paydate,                                   \
      v_paydate  ,v_currency ,v_corpcode ,                     \
      v_service  ,v_method   ,                                 \
      v_customer ,v_tele     ,v_rst_validation);

EXEC SQL PREPARE S1 FROM :sqlstr;

EXEC SQL EXECUTE S1;

sprintf(str,"\n1step sqltext => %s",sqlstr);
WriteLog(str);

/* ===================== 
 printf("\n ssssss ORA-%05d - Insert TEMP  --------\n", sqlca.sqlcode);
 ===================== */
	if (sqlca.sqlcode != 0) {	/* 에러이면 */
		sprintf(log_buff, "ORA-%05d - Insert TEMP 임시테이블 Error--------\n", sqlca.sqlcode);
		WriteLog(log_buff);
		Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
		/*EXEC SQL ROLLBACK WORK;*/
		return(-1);
	} else {			/* 에러가 아니면 */
		v_cnt_line = sqlca.sqlerrd[2];
		WriteLog("Insert TEMP 임시테이블 Success\n");
		sprintf(log_buff, "Process Count : %d\n", v_cnt_line);
		WriteLog(log_buff);
		Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/

		/*EXEC SQL COMMIT WORK;*/
	}

	/* **********************************************************************
	* Write ERP 인건비 Table *
	* ********************************************************************* */
        memset(str,'\0',sizeof(str));
        memset(sqlstr,'\0',sizeof(sqlstr1));
        
	/* " INSERT INTO HGL_%s@HAIS (                          \*/
	sprintf(sqlstr1,
	" INSERT INTO HGL_%s@HAIS (                          \
		DT_CREATE, CD_DATA, NO_CRT_SRL, HEADER_NAME, \
		DT_ACCOUNTING, NO_LINE, CURRENCY,            \
		SEGMENT1, SEGMENT2, SEGMENT3, SEGMENT4,      \
		SEGMENT5, SEGMENT6, SEGMENT7, SEGMENT8,      \
		ENTERED_DR, ENTERED_CR,                      \
		OUT_ACCOUNT,RST_VALIDATION )                 \
	SELECT  DT_CREATE, CD_DATA, NO_CRT_SRL, HEADER_NAME, \
		DT_ACCOUNTING, NO_LINE, CURRENCY,            \
		SEGMENT1, SEGMENT2, SEGMENT3, SEGMENT4,      \
		SEGMENT5, SEGMENT6, SEGMENT7, SEGMENT8,      \
		ENTERED_DR, ENTERED_CR,                      \
		OUT_ACCOUNT,RST_VALIDATION                   \
	FROM	ERP_HGL_%s                                   \
	WHERE	DT_CREATE  = TO_DATE('%s', 'YYYYMMDD')       \
	AND	CD_DATA    = '%s'                            \
	AND	NO_CRT_SRL = %d  ",
	v_cd_data, v_cd_data, v_dt_create, v_cd_data, v_no_crt_srl);

EXEC SQL PREPARE S2 FROM :sqlstr1;

EXEC SQL EXECUTE S2;

sprintf(str,"\n 2step sqltext => %s",sqlstr1);
WriteLog(str);

/* ========================== *
 printf(sqlstr1);
 printf("\n  ORA-%05d - Insert ERP  --------\n", sqlca.sqlcode);
/* ===================== */

	if (sqlca.sqlcode != 0) {	/* 에러이면  */
		v_cnt_line = 0;
		sprintf(log_buff, "ORA-%05d - Insert ERP 인건비 Error\n", sqlca.sqlcode);
		WriteLog(log_buff);
		Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
		/*EXEC SQL ROLLBACK WORK;*/
		return(-1);
	} else {			/* 에러가 아니면 */
		if (v_cnt_line != sqlca.sqlerrd[2]) {
			WriteLog("TEMP/ERP테이블에 Insert된 건수가 다릅니다.\n");
			sprintf(log_buff, "TEMP/ERP테이블에 Insert된 건수가 다릅니다.\n");
			Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
			/*EXEC SQL ROLLBACK WORK;*/
			return(-1);

		}
	WriteLog("Insert ERP 인건비 Success\n");
	sprintf(buff, "Process Count : %d\n", v_cnt_line);
	WriteLog(buff);
        
	/*EXEC SQL COMMIT WORK;*/

	v_amt_tot = 0;

        memset(str,'\0',sizeof(str));
        memset(sqlstr,'\0',sizeof(sqlstr));

	sprintf(sqlstr,
	" SELECT  SUM(ENTERED_DR)                     \
	FROM	ERP_HGL_%s                            \
	WHERE	DT_CREATE = TO_DATE('%s', 'YYYYMMDD') \
	AND	CD_DATA    = '%s'                     \
	AND	NO_CRT_SRL = %d "  ,
	v_cd_data,v_dt_create,v_cd_data,v_no_crt_srl);	

/*        EXEC SQL PREPARE S FROM :sqlstr;
        EXEC SQL EXECUTE S2 USING :v_amt_tot;  */
        EXEC SQL PREPARE S FROM :sqlstr;
        EXEC SQL DECLARE C CURSOR FOR S;
        EXEC SQL OPEN C ;
        EXEC SQL FETCH C INTO :v_amt_tot;  

/* ===================== */
 printf("\n--- %f  \n",v_amt_tot);
/* ===================== */
sprintf(str,"\n select sqltext => %s",sqlstr);
WriteLog(str);

		WriteLog("< Write 인건비 Ending >-------------------------\n");

		return(0);
	}
}

/*=== dsa2000 2004.10. Rexec대체 서비스를 위한 Write_batlog()  ===================*/
int Write_batlog(int seqno, char *message)
{
	
        EXEC SQL AT log_db 
        INSERT INTO PYBATLOG
        VALUES (:log_rundate, :log_progid, :seqno, :log_writeman, :message);

        if ((sqlca.sqlcode != 1403) && (sqlca.sqlcode != 0)) 
	{	
		printf("ERROR_CODE : %d, pybatlog Insert Error. \n", sqlca.sqlcode);
		return(-1);
	}                        
                        
        EXEC SQL AT log_db COMMIT WORK ;	
}