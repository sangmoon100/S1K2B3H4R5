/* ======================= Program Header =====================================
 PROGRAM-NAME   : PKMP2ERP2(INSA->ERP Interface Program)
 PROGRM-Decription : 
 USAGE          : pkmp2erp2 DBUserID 작업자사번 지급년월
 SYSTEM-NAME    : 급여
 SUBSYSTEM-NAME : 퇴직소득(퇴직금)
 Programmer     : 이랑교
 Version        : 1.04
 Date           : 1999.03.17

Update Contents
   Version    date(yy.mm.dd)     programmer      description
   1.00       1999.02.09         송두호          최초작성 
   1.03	      1999.03.10         이랑교          hit 조형래 요청사항
						지급일 = 퇴직일 입력
   1.04	      1999.03.17         이랑교         중간정산자료포함 : 양성원요청
   1.10	      2000.02.15         유효성         지급일 = 퇴직금 지급일 입력
   3.00       2002.02.08         유효성         근무지 필드 추가                                                       
                                                 -개인별 인사마스터의 근무지를 넘긴다.      
   3.10       2002.02.08         유효성         H_SSCODE 추가요청 (FROM 장근배)                                                  
   4.00       2002.07.03         유효성         전(2002-2355)
                                                1.HIT_CTRL의 회계일자(YM_ACCT)를 H_JIGUB_YMD컬럼과 같이 지급일로 수정 
   4.01       2004.02.19         강륜종         Oracle8i 업그레이드에 의한 관련 라이브러리 업그레이드. 		                                               
   5.00       2004.04.23         강륜종         MIS2 장비에 맞게 경로 및 환경 설정...     
   10.00      2004.11.     강륜종(dsa2000) Rexec대체 서비스를 위한 수정작업.          	         
 ============================================================================= */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <time.h>
#include "hinsa_macro.h"
#include "hinsa_string.h"
#include "hinsa_date.h"
#include "hinsa_log.h"
#include "hinsa_oracle.h"
#include "hinsa_common.h"

void CreateLog(void);
void InitVariables(void);
void Initialize(void);
void WriteLog(char *message);
int  WriteControl(int gubun);
int  WriteEmployee(void);
int  Check_date(void);


EXEC SQL INCLUDE sqlca;

EXEC SQL BEGIN DECLARE SECTION;
/****************************************************************************** 
  Interface Control Table Variables
******************************************************************************/ 
char	v_dt_create[9];			/* 생성일자 */
char	v_cd_data[5] = "TX05";		/* Employee Data Code */
int	v_no_crt_srl = 0;		/* 생성 일련번호 */

char	v_sscode[3+1] = "B10";		/* 정규직_퇴직소득세*/
char	v_sscodeil[3+1] = "B20";	/* 일용직_퇴직소득세*/

char	v_ym_acct[7];			/* 회계년월 */
int	v_cnt_line = 0;			/* Line건수 */ 
char	v_ph_proc[2] = "A";		/* 처리단계 */
char	v_st_proc[2] = "P";		/* 처리상태 (P:Processing, N:Normal Termination, A:Abnormal Termination) */
char	v_cl_data_use[2] = "A";		/* Data 활용구분 */
char	v_id_crt_user[5];		/* 생성 UserID */
char	v_paydate[7];                   /* 지급년월 */
char	v_yyyymm[7];                    /* 지급년월 */
char    v_yyyy[5]; 			/* 지급년 */
char    v_mm[3];			/* 지급월 */
double   v_amttot = 0;                   /* 퇴직총액   */
double   v_amtin  = 0;			/* 차감소득세총액   */
double   v_amtju  = 0;			/* 차감주민세총액   */
double   v_amttot1 = 0;                   /* 총액   */
double   v_amtin1  = 0;			/* 차감소득세총액   */
double   v_amtju1  = 0;			/* 차감주민세총액   */

/****************************************************************************** 
  Interface Employee Table Variables
******************************************************************************/ 
char	v_rst_validation[2] = "A";

EXEC SQL END   DECLARE SECTION;

/****************************************************************************** 
  Other Variables
******************************************************************************/ 
/*char	logdir[100] = "/hper/insa/ERP/log/";*/
char    *HOMEDIR;
char	logfile[40];
char	logfile_fullname[140];
int	id;
char	buff[1000];

/*=== dsa2000 2004.11. Rexec대체 서비스를 위한 =============*/
char    log_rundate[16]     = ""; 
char    log_progid[16]      = "";
char    log_writeman[5]     = "";
char    log_buff[100]       = "";
int     seqno = 0; 

/***** Log File Pointer *****/
FILE *fp;	

void main(int argc, char *argv[])
{
        if (argc != 5) {   /* pkmp2erp2 200311 D006 pkmp2erp2 2004110100000*/ 
	   printf("[Usage] : pkmp2erprt 1.퇴직년월(YYYYMM) 2.작업자 3.progid 4.시작시간\n");
	   fclose(fp);
	   exit(1);
	}

	sprintf(v_paydate, argv[1]);	        /* 지급년월   */     
	sprintf(v_id_crt_user, argv[2]);	/* 작업자사번 */
	
	/* Dsa2000  2004.02.23.	**********************************/
	/* DB_connect(id,0); */
	hinsa_log_print(0,"ERP 인터페이스 시작...");      
        hinsa_db_connect();  /*DB Connect 실시..*/
	/*dsa2000  수정..End......................................*/
	
	/*=== dsa2000 2004.11. Rexec대체 서비스를 위한 =============*/
	strcpy(log_writeman, argv[2]);
	strcpy(log_progid,   argv[3]);
	strcpy(log_rundate,  argv[4]);	
		
	EXEC SQL DECLARE log_db DATABASE;    
	hinsa_log_db_connect();
	/*========================================================*/
	
	InitVariables();		/* 변수 초기화 */
	Initialize();			/* 초기화 루틴 */

	CreateLog();
	
	sprintf(buff, "프로그램명 : %s\n", argv[0]);
	WriteLog(buff);
	sprintf(buff, "지급년월  : %s\n", argv[1]);
	WriteLog(buff);

        if(Check_date() != 0) {
    	        sprintf(buff, "지급년월에 해당하는 자료가 없습니다. %s\n", v_paydate);
		WriteLog(buff);

		fclose(fp);
                printf("지급년월에 해당하는 자료가 없습니다.\n");
                Write_batlog(seqno++, "지급년월에 해당하는 자료가 없습니다.\n");   /*dsa2000 Rexec 대체*/
                exit(1);
        }     
	
	if (WriteControl(0) == -1) {		/* 초기값 세팅 */
		fclose(fp);
		exit(1);
	}
	
	if (WriteEmployee() == -1)
	{
		WriteControl(2);	/* 비정상종료 */
		sprintf(log_buff, "ERROR ====== [작업 실패] =====\n");
		Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
		error_quit("ERROR ====== [작업 실패] =====\n");		/*Dsa2000*/
	}        
	else
	{
		WriteLog("< Program End......................................... >\n");
		fclose(fp);
        	printf("총    건    수 : %d\n", v_cnt_line);
		printf("퇴직금    합계 : %0.0f\n", v_amttot);
		printf("차감소득세합계 : %0.0f\n", v_amtin);
		printf("차감주민세합계 : %0.0f\n", v_amtju);		
		
		sprintf(log_buff, "총    건    수 : %d\n", v_cnt_line);
		Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
		sprintf(log_buff, "퇴직금    합계 : %0.0f\n", v_amttot);
		Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
		sprintf(log_buff, "차감소득세합계 : %0.0f\n", v_amtin);
		Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
		sprintf(log_buff, "차감주민세합계 : %0.0f\n", v_amtju);
		Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
		
		sprintf(log_buff, "OK ====== [작업 완료] =====\n");
		Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
		WriteControl(1); 	/* 정상종료 */	
		hinsa_exit(0,"OK ====== [작업 완료] =====\n");		/*Dsa2000*/
		
	}

}

void CreateLog()
{	/*2004.04.23 logdir => HOMEDIR*/
	HOMEDIR = hinsa_home();
	strcat(HOMEDIR,"/log/ERPlog/");
	
	/* 로그파일명을 세팅 */
	sprintf(logfile_fullname, "%spkmp2erp2%s%02d.log", HOMEDIR, v_dt_create, v_no_crt_srl);
	/* 로그파일 오픈 */
	fp = fopen(logfile_fullname, "w+");

	if (fp == NULL) {
		printf("로그파일오픈(%s) 에러\n", logfile_fullname);
		exit(1);
	}
}

void InitVariables(void)
{
	memset(logfile, NULL, sizeof(logfile));
	memset(logfile_fullname, NULL, sizeof(logfile_fullname));

	memset(v_dt_create, NULL, sizeof(v_dt_create));
	memset(v_ym_acct, NULL, sizeof(v_ym_acct));
}

void Initialize(void)
{

/*===========================================================================	
4.00       2002.07.03         유효성      전(2002-2355)
                                         1.HIT_CTRL의 회계일자(YM_ACCT)를 
                                           H_JIGUB_YMD컬럼과 같이 지급일로 수정                                             
============================================================================= */	
	/*EXEC SQL 
	SELECT	TO_CHAR(SYSDATE, 'YYYYMMDD') DT_CREATE,  
		TO_CHAR(SYSDATE, 'YYYYMM') YM_ACCT	
	INTO   
		:v_dt_create, :v_ym_acct
	FROM	DUAL;
	*/
	
	sprintf(v_ym_acct, v_paydate );
	
	EXEC SQL 
	SELECT	TO_CHAR(SYSDATE, 'YYYYMMDD') DT_CREATE
	INTO   
		:v_dt_create
	FROM	DUAL;


	if (sqlca.sqlcode != 0)
	{
		printf("ORA-%05d - 현재날짜 가져오기  Error\n", sqlca.sqlcode);
		fclose(fp);
		exit(1);
	}

	EXEC SQL 
	SELECT	MAX(NO_CRT_SRL)
	INTO	:v_no_crt_srl	
	FROM	HIT_CTRL@HAIS    /*FROM	HIT_CTRL_TEST   /* 테스트시에 사용 */
	WHERE	DT_CREATE = TO_DATE(:v_dt_create, 'YYYYMMDD')
	  AND	CD_DATA = :v_cd_data;

	if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != -1403) && (sqlca.sqlcode != -1405)) {
		printf("ORA-%05d - MAX Seril# 가져오기  Error\n", sqlca.sqlcode);
		fclose(fp);
		exit(1);
	} 
	v_no_crt_srl++;	/* 현재날짜의 생성일련번호 + 1 */
}

void WriteLog(char *message)
{
	fprintf(fp, "%s", message);
}

int WriteControl(int gubun)
{
	sprintf(buff, "< WriteControl Starting (Gubun : %d) >----------------\n", gubun);
	
	if (gubun == 1)
		sprintf(v_st_proc, "N");
	else if (gubun == 2)
		sprintf(v_st_proc, "A");

	WriteLog(buff);
	sprintf(buff, "v_dt_create : (%s)\n", v_dt_create);
	WriteLog(buff);
	sprintf(buff, "v_cd_data : (%s)\n", v_cd_data);
	WriteLog(buff);
	sprintf(buff, "v_no_crt_srl : (%d)\n", v_no_crt_srl);
	WriteLog(buff);
	sprintf(buff, "v_ym_acct : (%s)\n", v_ym_acct);
	WriteLog(buff);
	sprintf(buff, "v_ph_proc : (%s)\n", v_ph_proc);
	WriteLog(buff);
	sprintf(buff, "v_st_proc : (%s)\n", v_st_proc);
	WriteLog(buff);
	sprintf(buff, "v_cl_data_use : (%s)\n", v_cl_data_use);
	WriteLog(buff);
	sprintf(buff, "v_id_crt_user : (%s)\n", v_id_crt_user);
	WriteLog(buff);
	sprintf(buff, "v_cnt_line : (%d)\n", v_cnt_line);
	WriteLog(buff);

	if (gubun == 0) {	/* 작업시작시 Control Table Insert */

		EXEC SQL
		INSERT INTO HIT_CTRL@HAIS   /*INSERT INTO HIT_CTRL_TEST   /* 테스트시에 사용 */
			(DT_CREATE, CD_DATA, NO_CRT_SRL, YM_ACCT,
			PH_PROC, ST_PROC, CL_DATA_USE,
			ID_CRT_USER)
		VALUES	(TO_DATE(:v_dt_create, 'YYYYMMDD'), 
			:v_cd_data, :v_no_crt_srl, :v_ym_acct,
			:v_ph_proc, :v_st_proc, :v_cl_data_use,
			:v_id_crt_user);

	} else if (gubun == 1) {	/* 정상종료시 Control Table Update */                

		EXEC SQL
		UPDATE	HIT_CTRL@HAIS    /*UPDATE	HIT_CTRL_TEST   /* 테스트시에 사용 */
		SET	CNT_LINE = :v_cnt_line,		/* 처리건수 */
			ST_PROC = :v_st_proc,		/* 처리상태 "N" */	
                        AMT_TOT = :v_amttot,            /* 총액 */
			DT_CRT_COMP = SYSDATE		/* 작업완료일자 */
		WHERE	DT_CREATE = TO_DATE(:v_dt_create, 'YYYYMMDD')
		  AND	CD_DATA = :v_cd_data
		  AND	NO_CRT_SRL = :v_no_crt_srl;

	} else if (gubun == 2) {	/* 비정상종료시 Control Table Update */

		EXEC SQL
		UPDATE	HIT_CTRL@HAIS   /*UPDATE	HIT_CTRL_TEST   /* 테스트시에 사용 */
		SET	ST_PROC = :v_st_proc,	/* 처리상태를 "A"로 세팅 */	
                        AMT_TOT = :v_amttot     /* 총액 */
		WHERE	DT_CREATE = TO_DATE(:v_dt_create, 'YYYYMMDD')
		  AND	CD_DATA = :v_cd_data
		  AND	NO_CRT_SRL = :v_no_crt_srl;

	}

	if (sqlca.sqlcode != 0) {
		sprintf(buff, "ORA-%05d - Control Table Error ( Gubun : %d )\n",sqlca.sqlcode, gubun);
		WriteLog(buff);

		EXEC SQL ROLLBACK WORK;
		printf("Fail Program End......................................... >\n");
		sprintf(log_buff, "Fail Program End......................................... >\n");
		Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
		return(-1);
	} else {
		sprintf(buff, "< WriteControl Ending (Gubun : %d) >------------------\n", gubun);
		WriteLog(buff);

		EXEC SQL COMMIT WORK;
		if (gubun == 1) 
		{
			printf("OK Program End......................................... >\n");
			sprintf(log_buff, "OK Program End......................................... >\n");
			Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
		}			
		else if (gubun == 2)
		{
			printf("Fail Program End......................................... >\n");		
			sprintf(log_buff, "Fail Program End......................................... >\n");
			Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
		}			
		return(0);
	}
}

int WriteEmployee(void)
{
	WriteLog("< Write HTX_V_VAT05 Starting >-------------------------------\n");

	sprintf(buff, "v_dt_create : (%s)\n", v_dt_create);
	WriteLog(buff);
	sprintf(buff, "v_cd_data : (%s)\n", v_cd_data);
	WriteLog(buff);
	sprintf(buff, "v_no_crt_srl : (%d)\n", v_no_crt_srl);
	WriteLog(buff);
	sprintf(buff, "v_rst_validation : (%s)\n", v_rst_validation);
	WriteLog(buff);
	
/* -----------------------퇴직이력 ---------------------------------------- */
	EXEC SQL INSERT INTO HTX_V_VAT05 (
		 	DT_CREATE,
			CD_DATA,
			NO_CRT_SRL,
			H_YEAR,
			H_MONTH,
                        H_SSCODE,  /*2002-02-08 H_SSCODE 추가요청 FROM 장근배*/
			H_EMPNO,
			H_UNIT,
			H_DEDAT,
			H_DEPT,
			H_ENAME,
			H_JOSGU,
			H_RETIRE,
			H_MYUNG,
			H_BOHUM,
			H_TOTAL,
			H_GONG,
 			H_STANDARD,
 			H_STNDYY,       
			H_TAXYY,        
			H_SANTAX,       
			H_GONGTAX,      
 			H_FIXTAX,       
 			H_FIXNONG,      
 			H_FIXJUMIN,     
 			H_FIXTOTAL,     
 			H_NAPTAX,       
 			H_NAPNONG,      
 			H_NAPHUMIN,     
 			H_NAPTOTAL,     
 			H_WONTAX,       
 			H_WONNONG,      
 			H_WONJUMIN,     
 			H_WONTOTAL,     
 			RST_VALIDATION,
 			H_IDAY,
 			H_TDAY,
 			H_WOL,
 			H_KS_FROM,
 			H_KS_TO,
                        H_GUNMU   /*2002.02.08  유효성  근무지 필드 추가 : 개인별 인사마스터의 근무지를 넘긴다.*/
	) SELECT	--+ORDERED
		TO_DATE(:v_dt_create, 'YYYYMMDD') DT_CREATE,
		:v_cd_data CD_DATA,
		:v_no_crt_srl NO_CRT_SRL,
		SUBSTR(A.SUBDATE,1,4)  H_YEAR,   /*:v_yyyy    	H_YEAR,*/
		SUBSTR(A.SUBDATE,5,2)  H_MONTH,  /*:v_mm      	H_MONTH,*/
		:v_sscode       H_SSCODE,
		A.EMPNO    	H_EMP,
                '000'      	H_UNIT,  		
                A.SUBDATE	H_DEDAT,       /*지급일*/ /* :v_paydate	H_DEDAT,    -- by man yhs 2000.01.06*/
                NVL(B.FINCODE, 'xxxxx')	H_DEPT,
		A.KORNAME	H_ENAME,
		'Y'		H_JOSGU,
		A.RETAMT+A.HORRETAMT   H_RETIRE,/*A.RETAMTSUM  => A.RETAMT+A.HORRETAMT : 년도중 중간정산금액 배제키위해 DSA2000 2005.07. */
		'0'		H_MYUNG,        /*0  => A.HORRETAMT dsa2000  2006.01.*/
		'0'		H_BOHUM,
		A.RETAMT+A.HORRETAMT   H_TOTAL, /*A.RETAMTSUM  => A.RETAMT+A.HORRETAMT : 년도중 중간정산금액 배제키위해 DSA2000 2005.07. */
		A.RINDED	H_GONG,
		A.TAXSTAMT 	H_STANDARD,
		A.AVGTAXSTAMT  	H_STNDYY,
		A.RETAVGTAX	H_TAXYY,
		A.RETCALCTAX	H_SANTAX,
		A.RETTAXDED	H_GONGTAX,
		A.REALRETINTAX	H_FIXTAX,    /*A.RETINTAX => A.REALRETINTAX : DSA2000  2005.07*/
                '0'		H_FIXNONG,
		A.REALRETJUTAX	H_FIXJUMIN,  /*A.RETJUTAX => A.REALRETJUTAX : DSA2000  2005.07*/
		A.REALRETINTAX+A.REALRETJUTAX	H_FIXTOTAL, /*A.RETINTAX+A.RETJUTAX => REALRETINTAX+A.REALRETJUTAX   : DSA2000  2005.07*/
		A.BRETINTAX	H_NAPTAX,
		'0'		H_NAPNONG,
		A.BRETJUTAX	H_NAPHUMIN,
		A.BRETINTAX +A.BRETJUTAX	H_NAPTOTAL,
		A.RETINTAX - A.BRETINTAX	H_WONTAX,
		'0'		H_WONNONG,
		A.RETJUTAX - A.BRETJUTAX 	H_WONJUMIN,
		A.RETINTAX - A.BRETINTAX + A.RETJUTAX-A.BRETJUTAX	H_WONTOTAL,
		:v_rst_validation RST_VALIDATION,
		A.EMPDATE       H_IDAY,
		A.RETDATE       H_TDAY,
		A.REALMM        H_WOL,
		GREATEST(NVL(A.ORGEMPDATE, SUBSTR(A.RETDATE,1,4)||'0101'), SUBSTR(A.RETDATE,1,4)||'0101')  H_KS_FROM,
		A.RETDATE   H_KS_TO,
	        NVL(JOBPLACE, 'A1')  H_GUNMU       /*근무지--널이면 본사로 */           		
	FROM 	PKHRTHIS A, PYCDEPT B, PIMPMAS M
	WHERE 	A.ORGNUM = B.ORGNUM(+)
	  AND   A.DEPTCODE = B.DEPTCODE(+)	
	  AND   A.EMPNO = M.EMPNO(+)	  
	  AND   SUBSTR(A.SUBDATE,1,6)  = :v_paydate /* by man yhs 2000.01.06 */
	  AND   A.RETAMTSUM > 0 ;

	if (sqlca.sqlcode != 0) {	/* 에러이면 */
		sprintf(log_buff, "ORA-%05d - Insert TEMP HTX_V_VAT05 Error--------\n", sqlca.sqlcode);
		WriteLog(log_buff);
		Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
		EXEC SQL ROLLBACK WORK;
		return(-1);
	} else {			/* 에러가 아니면 */
		v_cnt_line = sqlca.sqlerrd[2];
		WriteLog("Insert TEMP HTX_V_VAT05 Success\n");
		sprintf(log_buff, "Process Count : %d\n", v_cnt_line);
		WriteLog(log_buff);
		Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
		EXEC SQL COMMIT WORK;
	}

/* -----------------------중간퇴직이력 ---------------------------------------- */
	EXEC SQL INSERT INTO HTX_V_VAT05 (
		 	DT_CREATE,
			CD_DATA,
			NO_CRT_SRL,
			H_YEAR,
			H_MONTH,
			H_SSCODE,      /*2002-02-08 H_SSCODE 추가 FROM 장근배 */
			H_EMPNO,
			H_UNIT,
			H_DEDAT,
			H_DEPT,
			H_ENAME,
			H_JOSGU,
			H_RETIRE,
			H_MYUNG,
			H_BOHUM,
			H_TOTAL,
			H_GONG,
 			H_STANDARD,
 			H_STNDYY,       
			H_TAXYY,        
			H_SANTAX,       
			H_GONGTAX,      
 			H_FIXTAX,       
 			H_FIXNONG,      
 			H_FIXJUMIN,     
 			H_FIXTOTAL,     
 			H_NAPTAX,       
 			H_NAPNONG,      
 			H_NAPHUMIN,     
 			H_NAPTOTAL,     
 			H_WONTAX,       
 			H_WONNONG,      
 			H_WONJUMIN,     
 			H_WONTOTAL,     
 			RST_VALIDATION,
 			H_IDAY,
 			H_TDAY,
 			H_WOL,
 			H_KS_FROM,
 			H_KS_TO,
 			H_GUNMU   /*2002.02.08  유효성  근무지 필드 추가 : 개인별 인사마스터의 근무지를 넘긴다.*/
	) SELECT	--+ORDERED
		TO_DATE(:v_dt_create, 'YYYYMMDD') DT_CREATE,
		:v_cd_data CD_DATA,
		:v_no_crt_srl NO_CRT_SRL,
		SUBSTR(A.SUBDATE,1,4)  H_YEAR,  /*:v_yyyy    	H_YEAR,*/
		SUBSTR(A.SUBDATE,5,2)  H_MONTH, /*:v_mm      	H_MONTH,*/
		:v_sscode       H_SSCODE,
		A.EMPNO    	H_EMP,
                '000'      	H_UNIT,  
		/* ***********************************
		ver 1.03 1999.03.10 hit 조형래 요청사항  지급일을 퇴직일로   :v_paydate	H_DEDAT,  */
                /*02/15/2000 1:56오후 hit 요청사항   A.MRTODATE	H_DEDAT, */
                A.subdate	H_DEDAT,
                NVL(B.FINCODE, 'xxxxx')	H_DEPT,
		A.KORNAME	H_ENAME,
		'Y'		H_JOSGU,
		A.RETAMT	H_RETIRE,
		'0'		H_MYUNG,
		'0'		H_BOHUM,
		A.RETAMT	H_TOTAL,
		A.RINDED	H_GONG,
		A.TAXSTAMT 	H_STANDARD,
		A.AVGTAXSTAMT  	H_STNDYY,
		A.RETAVGTAX	H_TAXYY,
		A.RETCALCTAX	H_SANTAX,
		A.RETTAXDED	H_GONGTAX,
		A.REALRETINTAX	H_FIXTAX,    /*A.RETINTAX => A.REALRETINTAX : DSA2000  2005.07*/
                '0'		H_FIXNONG,
		A.REALRETJUTAX	H_FIXJUMIN,  /*A.RETJUTAX => A.REALRETJUTAX : DSA2000  2005.07*/
		A.REALRETINTAX+A.REALRETJUTAX	H_FIXTOTAL,/*A.RETINTAX+A.RETJUTAX => REALRETINTAX+A.REALRETJUTAX   : DSA2000  2005.07*/
		'0'		H_NAPTAX,
		'0'		H_NAPNONG,
		'0'		H_NAPHUMIN,
		'0'		H_NAPTOTAL,
		A.RETINTAX 	H_WONTAX,
		'0'		H_WONNONG,
		A.RETJUTAX	H_WONJUMIN,
		A.RETINTAX + A.RETJUTAX		H_WONTOTAL,
		:v_rst_validation RST_VALIDATION,
		MRFRDATE        H_IDAY,
		MRTODATE        H_TDAY,
		RETMM           H_WOL,
		GREATEST(MRFRDATE, SUBSTR(MRTODATE,1,4)||'0101')    H_KS_FROM,		
		MRTODATE        H_KS_TO,
	        NVL(JOBPLACE,'A1')  H_GUNMU   	
	FROM 	PKHMRHIS A, PYCDEPT B, PIMPMAS M
	WHERE   A.ORGNUM = B.ORGNUM(+)
	  AND   A.DEPTCODE = B.DEPTCODE(+)	
	  AND   A.EMPNO = M.EMPNO(+)
	  AND   SUBSTR(A.subdate,1,6)  = :v_paydate;  /* 02/15/2000 1:39오후 AND   SUBSTR(A.MRTODATE,1,6)  = :v_paydate; */

	if (sqlca.sqlcode != 0) {	/* 에러이면 */
		sprintf(buff, "ORA-%05d - Insert TEMP HTX_V_VAT05 Error-------- 중간\n", sqlca.sqlcode);
		WriteLog(buff);
		EXEC SQL ROLLBACK WORK;
		return(-1);

	} else {			/* 에러가 아니면 */
		v_cnt_line = v_cnt_line + sqlca.sqlerrd[2];
		WriteLog("Insert TEMP HTX_V_VAT05 Success\n");
		sprintf(log_buff, "Process Count : %d\n", v_cnt_line);
		WriteLog(log_buff);
		Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
		EXEC SQL COMMIT WORK;
	}

	EXEC SQL INSERT INTO HTX_V_VAT05@HAIS (    /*EXEC SQL INSERT INTO HTX_V_VAT05_TEST (  /* 테스트시에 사용 */
			DT_CREATE,
			CD_DATA,
			NO_CRT_SRL,
			H_YEAR,
			H_MONTH,
			H_SSCODE,
			H_EMPNO,
			H_UNIT,
			H_DEDAT,
			H_DEPT,
			H_ENAME,
			H_JOSGU,
			H_RETIRE,
			H_MYUNG,
			H_BOHUM,
			H_TOTAL,
			H_GONG,
 			H_STANDARD,
 			H_STNDYY,       
			H_TAXYY,        
			H_SANTAX,       
			H_GONGTAX,      
 			H_FIXTAX,       
 			H_FIXNONG,      
 			H_FIXJUMIN,     
 			H_FIXTOTAL,     
 			H_NAPTAX,       
 			H_NAPNONG,      
 			H_NAPHUMIN,     
 			H_NAPTOTAL,     
 			H_WONTAX,       
 			H_WONNONG,      
 			H_WONJUMIN,     
 			H_WONTOTAL,     
 			RST_VALIDATION,
 			H_IDAY,
 			H_TDAY,
 			H_WOL,
 			H_KS_FROM,
 			H_KS_TO	,
 			H_GUNMU
	) SELECT
		DT_CREATE,
		CD_DATA,
		NO_CRT_SRL,
		H_YEAR,
		H_MONTH,
		H_SSCODE,
		H_EMPNO,
		H_UNIT,
		H_DEDAT,
		H_DEPT,
		H_ENAME,
		H_JOSGU,
		H_RETIRE,
		H_MYUNG,
		H_BOHUM,
		H_TOTAL,
		H_GONG,
 		H_STANDARD,
 		H_STNDYY,       
		H_TAXYY,        
		H_SANTAX,       
		H_GONGTAX,      
 		H_FIXTAX,       
 		H_FIXNONG,      
 		H_FIXJUMIN,     
 		H_FIXTOTAL,     
 		H_NAPTAX,       
 		H_NAPNONG,      
 		H_NAPHUMIN,     
 		H_NAPTOTAL,     
 		H_WONTAX,       
 		H_WONNONG,      
 		H_WONJUMIN,     
 		H_WONTOTAL,     
 		RST_VALIDATION,
 		H_IDAY,
 		H_TDAY,
 		H_WOL,
 		H_KS_FROM,
 		H_KS_TO,
 		H_GUNMU
	FROM	HTX_V_VAT05
	WHERE	DT_CREATE = TO_DATE(:v_dt_create, 'YYYYMMDD')
	  AND	CD_DATA = :v_cd_data
	  AND	NO_CRT_SRL = :v_no_crt_srl;

	if (sqlca.sqlcode != 0) {	/* 에러이면 */
		v_cnt_line = 0;

		sprintf(log_buff, "ORA-%05d - Insert ERP HTX_V_VAT05 Error\n", sqlca.sqlcode);
		WriteLog(log_buff);
		Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
		EXEC SQL ROLLBACK WORK;
		return(-1);
	} else {			/* 에러가 아니면 */
		if (v_cnt_line != sqlca.sqlerrd[2]) {
			WriteLog("TEMP/ERP테이블에 Insert된 건수가 다릅니다.\n");
			sprintf(log_buff, "TEMP/ERP테이블에 Insert된 건수가 다릅니다.");
			Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
			EXEC SQL ROLLBACK WORK;
			return(-1);

		}
		WriteLog("Insert ERP HTX_V_VAT05 Success\n");
		sprintf(log_buff, "Process Count : %d\n", v_cnt_line);
		WriteLog(log_buff);
		Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
		EXEC SQL COMMIT WORK;

		WriteLog("< WriteEmployee Ending >-------------------------\n");

                EXEC SQL
		SELECT  nvl(sum(RETAMT+HORRETAMT),0),          /*nvl(sum(RETAMTSUM),0),  dsa2000 2005.07.*/			
			nvl(sum(REALRETINTAX),0),              /*nvl(sum(RETINTAX),0),	nvl(sum(RETJUTAX),0)*/
			nvl(sum(REALRETJUTAX),0)
		INTO	:v_amttot, :v_amtin, :v_amtju
		FROM	PKHRTHIS		/* by man y.h.s */
       		WHERE   SUBSTR(SUBDATE,1,6) = :v_paydate;
		
		
		
                EXEC SQL
		SELECT  nvl(sum(RETAMT),0),
		        nvl(sum(REALRETINTAX),0),             /*A.RETINTAX => A.REALRETINTAX : DSA2000  2005.07*/
			nvl(sum(REALRETJUTAX),0)
		INTO	:v_amttot1, :v_amtin1, :v_amtju1
		FROM	PKHMRHIS
/*02/15/2000 1:53오후     WHERE   SUBSTR(MRTODATE,1,6) = :v_paydate;   */
       		WHERE   SUBSTR(subdate,1,6) = :v_paydate;
				
		v_amttot = v_amttot+v_amttot1;
		v_amtin = v_amtin+v_amtin1;
		v_amtju = v_amtju+v_amtju1;
		return(0);
	}


}

int Check_date()
{
	int cnt =0;
	EXEC SQL		/* by man yhs 2000.01.06 */
	SELECT  substr(SUBDATE, 1,6), SUBSTR(SUBDATE, 1,4) retyyyy,  SUBSTR(SUBDATE, 5, 2) retmm
	INTO	:v_yyyymm, :v_yyyy, :v_mm
	FROM	PKHRTHIS	/* by man yhs 2000.01.06 */
        WHERE   SUBSTR(SUBDATE,1,6) = :v_paydate
	  AND	ROWNUM = 1;

	cnt = sqlca.sqlerrd[2];
	if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
	{	
		return(1);
	}

/*02/15/2000 2:05오후
	EXEC SQL	
	SELECT  MRTODATE, SUBSTR(MRTODATE, 1,4) retyyyy,  
		SUBSTR(MRTODATE, 5, 2) retmm
	FROM	PKHMRHIS
        WHERE   SUBSTR(MRTODATE,1,6) = :v_paydate  
	  AND	ROWNUM = 1 ;  */

       
       EXEC SQL	
	SELECT  substr(subdate,1,6), SUBSTR(subdate, 1,4) retyyyy,  
		SUBSTR(subdate, 5, 2) retmm
	INTO	:v_yyyymm, :v_yyyy, :v_mm
	FROM	PKHMRHIS
        WHERE   SUBSTR(subdate,1,6) = :v_paydate  
	  AND	ROWNUM = 1 ;

	cnt = cnt + sqlca.sqlerrd[2];
	/*
	printf("\n================== cnt %d",cnt);
	*/
	if ( cnt == 0 )
	{	
		return(-1); 
	}

	if (( sqlca.sqlcode != 0 ) && (sqlca.sqlcode !=1403 ))
	{	
/* debug
printf("\n in the sqlcode[%d] ",sqlca.sqlcode);
*/
		return(1);
	}
	/* debug
	printf("\n last sqlcode[%d] ",sqlca.sqlcode);
	*/
              
               return(0);
}

/*=== dsa2000 2004.10. Rexec대체 서비스를 위한 Write_batlog()  ===================*/
int Write_batlog(int seqno, char *message)
{
	
        EXEC SQL AT log_db 
        INSERT INTO PYBATLOG
        VALUES (:log_rundate, :log_progid, :seqno, :log_writeman, :message);

        if ((sqlca.sqlcode != 1403) && (sqlca.sqlcode != 0)) 
	{	
		printf("ERROR_CODE : %d, pybatlog Insert Error. \n", sqlca.sqlcode);
		return(-1);
	}                        
                        
        EXEC SQL AT log_db COMMIT WORK ;	
}
