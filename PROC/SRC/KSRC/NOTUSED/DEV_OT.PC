/* ======================= Program Header ======================================
 PROGRAM-NAME   : dev_ot.pc(산업개발 초과근무수당  계산 = notes로부터 수신 data)
 SYSTEM-NAME    : 급여
 SUBSYSTEM-NAME : 산업개발 급여 
 Programmer     : 유효성 
 Version        : 
 Date           : 2001-08-30 

참고 :   Getdaykind()  :  dsa2000  주 5일제 시행시 수정해야함.

Update Contents
 Version  date(yy.mm.dd)  programmer    description              relevant doc.no
  1.00    2001.08.30.      유효성       신규개발                                      
  1.01    2004.03.08       강륜종       Oracle8i 업그레이드에 의한 관련 라이브러리 업그레이드.                              
  2.00    2006.06.22.      DSA2000      주5일제 시행에 의해 토요일도 휴일로 수정(7월부터 주5일제)
 ============================================================================= */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>

#include <ctype.h>
#include <time.h>
#include "hinsa_macro.h"
#include "hinsa_string.h"
#include "hinsa_date.h"
#include "hinsa_log.h"
#include "hinsa_oracle.h"

#define  SUCCESS     -1
#define  FAIL        -2

double  GetTime(char *frrealtime, char *torealtime, char *SSTime, char *EETime);
double  GetHours(char *frrealtime, char *torealtime) ;
int     Getdaykind(char *frrealtime) ;
int  id;
void    trail_spaces(char *dest);

EXEC SQL BEGIN DECLARE SECTION;

/***  초과근무이력테이블(PKHTEOT) 참조변수  ***/
     char    ovtmdate[9]     = "";    /* 근무일자    */
     char    empno[6]        = "";    /* 사번    */
     char    korname[13]     = "";    /* 성명    */
     int     daykind         = 0 ;    /* 근무일구분    */
     char    frrealtime[13]     = "";    /* 실제개시시간 */
     char    torealtime[13]     = "";    /* 실제종료시간 */
     double  mtotmm           = 0;    /* 총근무(분)    */
     
     char    conyn[2]        = "";    /* 결재여부    */
     char    contime[13]     = "";    /* 결재일시    */
     char    conemp[5]       = "";    /* 결재자사번    */
     char    nightmealyn       = 0;
     
     double  t_exthh       = 0;  /* 연장근로시간    */  
     double  t_nighthh     = 0;  /* 야간근로시간    */  
     double  t_holihh      = 0;  /* 휴일근로시간    */  
     double  t_holiexthh    = 0;  /* 휴일연장근로시간    */  
     double  t_holinighthh  = 0;  /* 휴일야간시간    */  
     double  t_mealhh        = 0;    /* 휴일 식사시간 제외시간 */
     double  t_excephh       = 0;    /* 9시간이상시 1시간제외시간*/
    
     char    workmm[7]       = "";  /* 작업년월            */
     char    frworkdate[9]    = "";  /* 작업년월일 fr    */
     char    toworkdate[9]    = "";  /* 작업년월일 to    */
     char    frempno[6]      = "";  /* 사번FROM    */
     char    toempno[6]      = "";  /* 사번TO    */
     char    jobempno[5]     = "";  /* 작업자사번    */
     long    s_count   = 0;
     long    f_count   = 0;  

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA;

void main(int argc,char *argv[])
{
     int flag;
     
     if  (argc != 5)
     {
          printf("매개변수 갯수가 틀립니다.dev_ot S000 Szzz 20070101 20070131 \n");
          printf("1.사번fr S000.\n");
          printf("2.사번to Szzz.\n");
          printf("3.frdate 20001101.\n");
          printf("4.todate 20001130.\n");
          printf("5. 작업사번 0000.\n");
          return;
     }
     
     strcpy(frempno,argv[1]);
     strcpy(toempno,argv[2]);  
     strcpy(frworkdate,argv[3]);
     strcpy(toworkdate,argv[4]);  
     /*strcpy(jobempno,argv[5]);*/
     
     /* Dsa2000  2004.03.09.  **********************************/
     hinsa_log_print(0,"하나로산업개발 초과근무 계산 시작...");         
     hinsa_db_connect();  /*DB Connect 실시..*/
     /*dsa2000  수정..End......................................*/
     
     EXEC SQL 
     LOCK TABLE PKHDEVOT in EXCLUSIVE MODE NOWAIT;
     
     if  (clear_records() != SUCCESS)
     {
          error_quit("ERROR ====== [작업 실패] =====\n");
     }
         
      s_count = f_count =  0;        
      flag =  process_records();       
         
      printf("\n (%ld)건에 대해서 초과근무시간 계산 성공.\n",s_count);                
      printf("\n (%ld)건에 대해서 초과근무시간 계산 실패.\n",f_count);       
        
        
      /* Dsa2000  2004.03.09.  hinsa_exit()에서 DB Commit & DB접속종료함.
                               error_quit()에서 DB Rollback & DB  종료함.*/       
      if  (flag != SUCCESS)
      {
           error_quit("ERROR ====== [작업 실패] =====\n");
      }
      else
      {
           hinsa_exit(0,"OK ====== [하나로산업개발 초과근무 계산 작업성공] =====\n");  
      }
}        

/*****************************************************************************
  계산 전 해당항목을 Clear하는 함수.  
 *****************************************************************************/ 
clear_records()
{
     EXEC SQL
     UPDATE  PKHDEVOT
        SET  EXTHH     = 0,  NIGHTHH     = 0,    HOLIHH = 0,    
             HOLIEXTHH = 0,  HOLINIGHTHH = 0,    MEALHH = 0,
             EXCEPHH   = 0,  NIGHTMEALYN = 'N'
     WHERE  OVTMDATE BETWEEN  :frworkdate AND :toworkdate
       AND  EMPNO BETWEEN  :frempno and :toempno ;  
     
     if ((sqlca.sqlcode != 1403) && (sqlca.sqlcode != 0)) 
     {    
          printf("ERROR_CODE : %d, 자료 Clear Error. \n",  sqlca.sqlcode);
          return(FAIL);
     }
     else
          return(SUCCESS);
}  

/*****************************************************************************
  대상자료를 추출하는 함수.
 *****************************************************************************/
process_records()
{ 
     EXEC SQL DECLARE cursor1 CURSOR FOR
     SELECT  NVL(OVTMDATE,' '),    NVL(A.EMPNO,' '),    NVL(A.KORNAME,' '),   
             NVL(FRREALTIME,'*'),  NVL(TOREALTIME,'*')
       FROM  PKHDEVOT A 
      WHERE  OVTMDATE BETWEEN :frworkdate AND :toworkdate 
        AND  A.EMPNO >= :frempno AND A.EMPNO <= :toempno           
      ORDER  BY A.EMPNO, OVTMDATE;
     
     EXEC SQL OPEN cursor1;
     
     if ((sqlca.sqlcode != 1403) && (sqlca.sqlcode != 0) && (sqlca.sqlcode != -1405)) 
     {    
          printf("SELECT ERROR ERROR_CODE : %d, Cursor1 Open Error\n", sqlca.sqlcode);
          EXEC SQL CLOSE cursor1;
          return(FAIL);
     }
     
     while(1) 
     {
          EXEC SQL FETCH cursor1
          INTO :ovtmdate,   :empno,     :korname, 
               :frrealtime, :torealtime ;
          if  (sqlca.sqlcode == 1403) 
          {
               EXEC SQL CLOSE cursor1;
               return(SUCCESS);
          }
                      
          trail_spaces(empno); 
          trail_spaces(frrealtime);
          trail_spaces(torealtime);                
            
          if (Calchh(frrealtime, torealtime) == FAIL ) 
          {
                printf(" 계산 실패 =>사번 : %s, 성명 : %s ,초과근무일자 : %s \n ",
                                     empno,    korname,   ovtmdate);
                f_count ++ ;
          }
          else  
              s_count ++ ;             
     } /*--while end*/
}   


Calchh(char *frrealtime, char *torealtime)
{
     char SSTime [5] = "";
     char EETime [5] = "";
     char frtime [13] = "";
     char totime [13] = ""; 
     
     sprintf(frtime, "%.12s", frrealtime);
     sprintf(totime, "%.12s", torealtime);
       
     mtotmm        = 0;
     daykind       = 0;
     t_exthh       = 0;
     t_nighthh     = 0;
     t_holihh      = 0;  
     t_holiexthh   = 0;
     t_holinighthh = 0;
     t_mealhh      = 0;
     t_excephh     = 0;
     
     if ((mtotmm = GetHours(frtime, totime)) == FAIL )
          return(FAIL);
      
     if ((daykind =  Getdaykind(frtime)) == FAIL )
          return(FAIL);
      
     /*dsa2000 2006.06.22.  주5일제 시행에 의해 토요일도 휴일로 지정(daykind = 4) 되어 아래 루틴 무시됨.*/   
     if  (daykind == 3)  /*토요일*/
          sprintf(SSTime,"%.4s","1400");
     else 
          sprintf(SSTime,"%.4s","1900");
     
     sprintf(EETime,"%4s","0800");
          
     if ((t_exthh   = GetTime( frtime, totime , SSTime, EETime)) == FAIL)
          return (FAIL) ;
       
     sprintf(SSTime,"%.4s","2200");
     sprintf(EETime,"%.4s","0600");
     
     if ((t_nighthh = GetTime( frtime, totime,  SSTime, EETime)) == FAIL)
          return (FAIL) ;
 
     if (daykind == 4 )   /*휴일이면*/
     {     
          if (mtotmm > 0) 
          {  
              t_holihh= floor(mtotmm / 60);
              t_exthh = 0;
          }
     }
     
     if ((t_mealhh = get_mealhh(frtime, totime)) == FAIL )
          return (FAIL) ; 
     
     if ((t_excephh = get_excepthh(frtime, totime)) == FAIL)
          return (FAIL) ;
      
     t_exthh   = floor(t_exthh) ; 
     t_nighthh = floor(t_nighthh);
     t_holihh  = floor(t_holihh);
     t_mealhh  = floor(t_mealhh) ;
     t_excephh = floor(t_excephh);
     
     if  (t_holihh > 8) 
     {
          t_holiexthh = t_holihh - 8 ;
          t_holihh = 8 ;
     }
       
     if ((t_holihh >= 8)  && (t_nighthh > 0))
          t_holinighthh = t_nighthh ;
       
     if  (t_holihh > 0)           
          t_nighthh     = 0  ;      
         
      
     if ((t_exthh > 0 ) && (daykind != 4 && daykind != 3)) /*야근식대 평일 초과근무가 있을시 지급*/    
     {   
          EXEC SQL
          UPDATE PKHDEVOT
                 SET nightmealyn = 'Y'           
              WHERE EMPNO       = :empno
                AND OVTMDATE    = :ovtmdate
                AND FRREALTIME  = :frtime ;   
          
          if (sqlca.sqlcode != 0) 
          {
             printf("NIGHTMEALYN UPDATE ERROR ERROR_CODE : %d \n", sqlca.sqlcode);
             return(FAIL);
          }        
     }    
        
     EXEC SQL
     UPDATE PKHDEVOT
        SET EXTHH       = :t_exthh ,
            NIGHTHH     = :t_nighthh,
            HOLIHH      = :t_holihh,
            HOLIEXTHH   = :t_holiexthh,   
            HOLINIGHTHH = :t_holinighthh,
            MEALHH      = :t_mealhh,
            EXCEPHH     = :t_excephh
      WHERE EMPNO       = :empno
        AND OVTMDATE    = :ovtmdate
        AND FRREALTIME  = :frtime ;   
     
     if  (sqlca.sqlcode != 0) 
     {
          printf("UPDATE ERROR ERROR_CODE : %d \n", sqlca.sqlcode);            
          return(FAIL);
     }  
     else
          return(SUCCESS);      
}

get_mealhh(char *frtime, char *totime)
{
     int     dd     = 0;
     int     tmp    = 0;
     char    stime[5] = "";
     char    etime[5] = "";
     char    t_str[5] = "";
     int     btime1 = 0;
     int     btime2 = 0;
     int     istime = 0;
     int     ietime = 0;
     int     daykind = 0 ;
     double  t_mealmm = 0 ;  
     
     strncpy(stime,frtime+8,4);
     strncpy(etime,totime+8,4);
     istime = atoi(stime);
     ietime = atoi(etime);  
     
     daykind   = Getdaykind(frtime);                  
     
     EXEC SQL
     SELECT  TO_DATE(substr(:totime,1,8),'YYYYMMDD') - TO_DATE(substr(:frtime,1,8), 'YYYYMMDD')
     INTO  :dd
     FROM  DUAL;         
       
       
     if  (daykind == 1)   /*평일이면 그냥 return*/           
          return (0) ;         
     
     if  (dd == 1) 
     {
          strncpy(t_str,totime+8,4);
          tmp     = atoi(t_str);
          ietime  = tmp + 2400;
     }
      

/* 아침, 점심, 저녁 식사시간을 차례로 계산 */        

/*시작일 아침*/

     if (daykind != 3)  /*토요일이 아니면*/ 
     {    
          btime1 = 800 ;
          btime2 = 900 ;
          
          if ((istime >= btime1) && (istime <= btime2) && 
              (ietime > btime2) )   
          {                  
               t_mealmm  = get_minterm(istime, btime2) ;    
          } 
          else if ((ietime >= btime1) && 
                   (ietime <= btime2) &&
                   (istime < btime1)) 
          {    
               t_mealmm  = get_minterm(btime1,ietime);      
          }
          else if ((istime >= btime1) && (istime <= btime2) && 
                   (ietime <= btime2) && (ietime >  istime))  
          {
               t_mealmm = get_minterm(istime,ietime);
          }
          else if ((istime <= btime1) && (ietime >= btime2) &&
                   (ietime >  istime)) 
          {
               t_mealmm = get_minterm(btime1,btime2);
          }
          else 
          {
               t_mealmm = 0;
          }
            
        
        /*다음날 아침*/  
          if ((dd == 1) && (strcmp(etime,"0800") > 0))
          {     
               btime1 = 800 + 2400 ;
               btime2 = 900 + 2400 ;
               
               if ((istime >= btime1) && (istime <= btime2) && 
                   (ietime > btime2) )    
               {                
                    t_mealmm +=  get_minterm(istime, btime2) ;    
               } 
               else if ((ietime >= btime1) && 
                        (ietime <= btime2) &&
                        (istime < btime1)) 
               {
                    t_mealmm +=  get_minterm(btime1,ietime);    
               }
               else if ((istime >= btime1) && (istime <= btime2) && 
                        (ietime <= btime2) && (ietime >  istime))  
               {
                    t_mealmm += get_minterm(istime,ietime);
               }
               else if ((istime <= btime1) && (ietime >= btime2) &&
                        (ietime >  istime)) 
               {
                    t_mealmm += get_minterm(btime1,btime2);
               }
               else 
               {
                    t_mealmm += 0;
               }
          }  


/*시작일 점심*/
          if  (daykind != 3) /*토요일이 아니면*/
          {
               btime1 = 1200 ;
               btime2 = 1300 ;
               
               if ((istime >= btime1) && (istime <= btime2) && 
                   (ietime > btime2) )  
               {         
                    t_mealmm  +=  get_minterm(istime,btime2);   
               } 
               else if ((ietime >= btime1) && 
                        (ietime <= btime2) &&
                        (istime < btime1)) 
               {
                    t_mealmm  += get_minterm(btime1,ietime);
               }
               else if ((istime >= btime1) && (istime <= btime2) && 
                        (ietime <= btime2) && (ietime >  istime))  
               {
                    t_mealmm += get_minterm(istime,ietime);
               }
               else if ((istime <= btime1) && (ietime >= btime2) &&
                        (ietime >  istime)) 
               {
                    t_mealmm += get_minterm(btime1,btime2);
               }
               else 
               {
                    t_mealmm += 0;
               }
          }
              
/*다음날 점심*/  
          if ((dd == 1) && (strcmp(etime,"0800") > 0))
          {
               btime1 = 1200 + 2400 ;
               btime2 = 1300 + 2400 ;
               
               if ((istime >= btime1) && (istime <= btime2) && 
                   (ietime > btime2) )  
               {         
                    t_mealmm =  get_minterm(istime,btime2);    
               } 
               else if ((ietime >= btime1) && 
                        (ietime <= btime2) &&
                        (istime < btime1)) 
               {
                    t_mealmm = get_minterm(btime1,ietime);
               }
               else if ((istime >= btime1) && (istime <= btime2) && 
                        (ietime <= btime2) && (ietime >  istime))  
               {
                    t_mealmm += get_minterm(istime,ietime);
               }
               else if ((istime <= btime1) && (ietime >= btime2) &&
                        (ietime >  istime)) 
               {
                    t_mealmm += get_minterm(btime1,btime2);
               }
               else 
               {
                    t_mealmm += 0;
               }
          }
     }
    
/*시작일 저녁*/
     btime1 = 1800  ;
     btime2 = 1900  ;  
  
     if ((istime >= btime1) && (istime <= btime2) && 
         (ietime > btime2) )  
     {         
          t_mealmm += get_minterm(istime,btime2);    
     } 
     else if ((ietime >= btime1) && 
              (ietime <= btime2) &&
              (istime < btime1)) 
     {
          t_mealmm += get_minterm(btime1,ietime);
     }
     else if ((istime >= btime1) && (istime <= btime2) && 
              (ietime <= btime2) && (ietime >  istime))  
     {
          t_mealmm += get_minterm(istime,ietime);
     }
     else if ((istime <= btime1) && (ietime >= btime2) &&
              (ietime >  istime)) 
     {
          t_mealmm += get_minterm(btime1,btime2);
     }
     else 
     {
          t_mealmm += 0;
     }  

/* 다음날 저녁 */
     if ((dd == 1) && (strcmp(etime,"0800") > 0))
     {
          btime1 = 1800 + 2400;
          btime2 = 1900 + 2400;
  
  
          if ((istime >= btime1) && (istime <= btime2) && 
              (ietime > btime2) )  
          {         
                t_mealmm += get_minterm(istime,btime2);
          } 
          else if ((ietime >= btime1) && 
                   (ietime <= btime2) &&
                   (istime < btime1)) 
          {
               t_mealmm = get_minterm(btime1,ietime);
          }
          else if ((istime >= btime1) && (istime <= btime2) && 
                   (ietime <= btime2) && (ietime >  istime))  
          {
               t_mealmm += get_minterm(istime,ietime);
          }
          else if ((istime <= btime1) && (ietime >= btime2) &&
                   (ietime >  istime)) 
          {
               t_mealmm += get_minterm(btime1,btime2);
          }
          else 
          {
               t_mealmm += 0;
          }        
     }
     return(floor(t_mealmm / 60));
}

/****************************************************************************
       19:00(18:00)~08:00 9시간이상근무시 1시간 제외하는 함수
 ****************************************************************************/
get_excepthh(char *frtime, char* totime)
{
     char   ba[5]   = "";
     char   bb[5]   = "";  
     double excephh = 0 ;
     int    tmp     = 0 ;  
     int    dd      = 0 ;
     
     sprintf(ba,"%s",frtime+8);
     sprintf(bb,"%s",totime+8);  
     
     EXEC SQL
     SELECT  TO_DATE(substr(:totime,1,8),'YYYYMMDD') - TO_DATE(substr(:frtime,1,8), 'YYYYMMDD')
     INTO  :dd
     FROM  DUAL;    
     
     if  (dd == 0)
          return(0);
        
      if  (dd == 1) 
      {
           if  (strcmp(ba, "1900") < 0 )     
                strcpy(ba, "1900")  ;
            
           if  (strcmp(bb, "0800") > 0 )
                strcpy(bb, "0800") ;
           
           tmp = atoi(bb) + 2400 ;   
             
           tmp = (int)(get_minterm(atoi(ba), tmp) / 60)  ;
           
           if ( tmp >= 9 ) 
              excephh = 1 ;      
     }         
     return (excephh) ;        
}


/****************************************************************************
        시작시간과 종료시간 사이의 간격을 분단위로 구하는 함수.
 ****************************************************************************/
get_minterm(int a,int b)
{
     int mm1,mm2;  
     int hh1,hh2;
     
     hh1 = (int) (a/100);
     hh2 = (int) (b/100);
     mm1 = a - (hh1*100);
     mm2 = b - (hh2*100);
     
     mm1 = hh1 * 60 + mm1;
     mm2 = hh2 * 60 + mm2;
     mm2 = mm2 - mm1;
     return(mm2);
}

double  GetTime(char *frrealtime, char *torealtime, char *SSTime, char *EETime)
{
     EXEC SQL BEGIN DECLARE SECTION;
          char  frtime[13]    = "";
          char  totime[13]    = "";
          char  sFrDate[8+1]  = "";
          char  sFrTime[4+1]  = "";
          char  sToDate[8+1]  = "";
          char  sToTime[4+1]  = "";
          char  STime[4+1]    = "";
          char  ETime[4+1]    = "";
          char  sFrNextDate[9]= "";  /*다음날*/
     EXEC SQL END DECLARE SECTION;
    
     double mTempMM   ;
     double Result;      
     char   frdfrt[13] ="";
     char   frdet[13]  ="";
     char   todtot[13] ="";
     char   frdst[13]  ="";
     char   frndet[13] ="";
     char   frndst[13] ="";          
    
     sprintf(sFrDate,"%.8s",frrealtime);
     sprintf(sFrTime,"%.4s",frrealtime+8);  
     sprintf(sToDate,"%.8s",torealtime);
     sprintf(sToTime,"%.4s",torealtime+8);   
     sprintf(STime,"%.4s",SSTime);
     sprintf(ETime,"%.4s",EETime);   
      
     
     EXEC SQL
     select to_char(to_date(substr(:sFrDate,1,8), 'YYYYMMDD') + 1, 'YYYYMMDD') 
       into :sFrNextDate
       from dual ;              
        
       
     if  (sqlca.sqlcode != 0)
     {
          printf("다음날 구하기에서 ERROR : %d \n", sqlca.sqlcode);            
          return(FAIL);
     }  
     
     sprintf(frdfrt, "%.8s%.4s", sFrDate,sFrTime);     
     sprintf(frdet,  "%.8s%.4s", sFrDate,ETime);     
     sprintf(todtot, "%.8s%.4s", sToDate,sToTime);     
     sprintf(frdst,  "%.8s%.4s", sFrDate,STime);     
     sprintf(frndet, "%.8s%.4s", sFrNextDate,ETime);
     sprintf(frndst, "%.8s%.4s", sFrNextDate,STime);
     
     Result = 0;
     
     if (strcmp(frdfrt ,frdet) < 0)  /* 시작시각이 시작일 06 이전*/    
     {      
          if  (strcmp (todtot, frdet) < 0)  /* 종료시각이 시작일 06 이전*/
          {
               sprintf(frtime, "%.8s%.4s", sFrDate,sFrTime);
               sprintf(totime, "%.8s%.4s", sToDate,sToTime);
               Result = GetHours(frtime, totime);
          }     
          else if ((strcmp(todtot , frdet) >= 0) 
                && (strcmp(todtot , frdst) < 0)) /* 종료시각이 시작일 06 ~ 22*/
          {
               sprintf(frtime, "%.8s%.4s", sFrDate,sFrTime);
               sprintf(totime, "%.8s%.4s", sFrDate,ETime);           
               Result = GetHours(frtime, totime);
          }
          else if ((strcmp(todtot , frdst) >= 0)
                && (strcmp(todtot , frndet) < 0)) /* 종료시각이 시작일 22 ~ 명일 06*/
                
          {
               sprintf(frtime, "%.8s%.4s", sFrDate,sFrTime);
               sprintf(totime, "%.8s%.4s", sFrDate,ETime);                     
               mTempMM = GetHours(frtime, totime);
               Result = mTempMM;
               
               sprintf(frtime, "%.8s%.4s", sFrDate,STime);
               sprintf(totime, "%.8s%.4s", sToDate,sToTime);           
               
               mTempMM = GetHours(frtime, totime);
               Result = Result + mTempMM;
          }
          else /*-- 에러*/
               return (FAIL) ;    /*Result = 0;*/
      }  
        
     else if ((strcmp(frdfrt , frdet) >= 0)
           && (strcmp(frdfrt , frdst) < 0))  /* 시작시각이 시작일 06 ~ 22*/
            
     {      
          if  (strcmp(todtot , frdet) < 0)  /* 종료시각이 시작일 06 이전*/
               Result = 0 ;
          else if ((strcmp(todtot , frdet) >= 0 )
                && (strcmp(todtot , frdst) < 0))  /* 종료시각이 시작일 06 ~ 22 */         
               Result = 0 ;
          else if ((strcmp(todtot , frdst) >= 0)
                && (strcmp(todtot , frndet) < 0))  /* 종료시각이 시작일 22 ~ 명일 06*/
          { 
               sprintf(frtime, "%.8s%.4s", sFrDate,STime);
               sprintf(totime, "%.8s%.4s", sToDate,sToTime);                    
               Result = GetHours(frtime, totime) ;
          }
          else /* if (sToDate+sToTime >= sToDate+ETime) then  종료시각이 명일 06 이후*/
          {
              sprintf(frtime, "%.8s%.4s", sFrDate,STime);
              sprintf(totime, "%.8s%.4s", sToDate,ETime);                        
              Result = GetHours(frtime, totime);
          } 
     }
     else if (strcmp(frdfrt , frdst) >= 0)  /* 시작시각이 시작일 22이후*/
     {
          
          if  (strcmp(todtot , frdst) < 0)  /* 종료시각이 시작일 22 이전 */
               Result = 0 ;
            
          else if ((strcmp(todtot , frdst) >= 0) 
                  && (strcmp(todtot , frndet) < 0 ))  /* 종료시각이 시작일 22 ~ 명일 06*/
          {
               sprintf(frtime, "%.8s%.4s", sFrDate,sFrTime);          
               sprintf(totime, "%.8s%.4s", sToDate,sToTime);                             
               Result = GetHours(frtime, totime) ;
          } 
          else if ((strcmp(todtot , frndet) >= 0)  
                && (strcmp(todtot , frndst) < 0))  /* 종료시각이 명일 06 ~ 22*/
          { 
               sprintf(frtime, "%.8s%.4s", sFrDate,sFrTime);
               sprintf(totime, "%.8s%.4s", sToDate,ETime);                            
               Result = GetHours(frtime, totime) ;
          } 
          
          else /* if (sToDate+sToTime >=  sFrNextDate+STime) then -- 종료시각이 명일 22시 이후*/
          {
               sprintf(frtime, "%.8s%.4s", sFrDate,sFrTime);
               sprintf(totime, "%.8s%.4s", sToDate,ETime);           
               
               mTempMM = GetHours(frtime, totime);
               Result = mTempMM;
               
               sprintf(frtime, "%.8s%.4s", sToDate,STime);
               sprintf(totime, "%.8s%.4s", sToDate,sToTime);    
                                
               mTempMM = GetHours(frtime, totime);
               Result = Result + mTempMM;
          }    
     }            
     Result = Result / 60;   
     return (Result);
}
  
/******************************************************/  

double GetHours(char *frrealtime, char *torealtime)
{    

     EXEC SQL BEGIN DECLARE SECTION;
          char mtodatetime[12+1];
          char mfrdatetime[12+1];  
          double fGap = 0.0 ;  
     EXEC SQL END   DECLARE SECTION;
          
     sprintf(mfrdatetime, "%.12s", frrealtime);
     sprintf(mtodatetime, "%.12s", torealtime);
           
     EXEC SQL 
     select
     floor(( to_date(:mtodatetime,'YYYYMMDDHH24MI') - to_date(:mfrdatetime,'YYYYMMDDHH24MI') ) * 24 * 60 +1 / (24*60*60))
     into :fGap
     from dual ;
       
     if  (sqlca.sqlcode != 0)
     {
          printf("GetHours 구하기에서 ERROR : %d \n", sqlca.sqlcode);           
          return(FAIL);
     }  
        
     return (fGap);   
}

/****************************************************************************
  근무일의 종류를 결정하는 함수.
  1 -> 평일,  3 -> 토요일, 4 -> 휴일
 ****************************************************************************/
int Getdaykind(char *frrealtime )
{
     EXEC SQL BEGIN DECLARE SECTION;
          char day[8+1];
          char ddname[20];
          int  count;
          char frrealdd[8+1];
     EXEC SQL END   DECLARE SECTION;
     
     char dayname[100];
     int i = 0;
     sprintf(frrealdd, "%.8s", frrealtime);
       
     EXEC SQL 
     SELECT TO_CHAR(TO_DATE(:frrealdd,'YYYYMMDD'),'DAY')
     INTO  :ddname
     FROM  DUAL;
      
     if  (sqlca.sqlcode != 0)
     {
          printf("daykind 구하기에서 ERROR : %d \n", sqlca.sqlcode);
          return(FAIL);
     }  
      
     count = 0;
     while (ddname[count] != ' ')
          count++;
     ddname[count] = '\0';
     
       
     if  (strcmp(ddname,"SUNDAY") == 0)
          return(4);
     
     count = 0;
     
     EXEC   SQL
     SELECT   COUNT(*)
       INTO  :count
       FROM     PKCHOLI
      WHERE    HOLIDATE = :frrealdd ;
     
     if  (sqlca.sqlcode != 0)
     {
          printf("휴일 count에서 ERROR : %d \n", sqlca.sqlcode);
          return(FAIL);
     }  
     
     if  (count >= 1)
     {
          i = 4;
          return(i);
     }

/*dsa2000 2006.06.22.  주5일제 시행에 의해 토요일도 휴일로 지정 */
/*  if (strcmp(ddname,"SATURDAY") == 0)   
      i = 3;  
  else
            i = 1;*/
     if  (strcmp(ddname,"SATURDAY") == 0)   
          i = 4;  
     else
          i = 1;            
     
     return(i);
}
   

/****************************************************************************
  trail_spaces function.
 ****************************************************************************/
void trail_spaces(char *dest)
{
     int len,i,flag;
     
     len = strlen(dest);
     
     i    = 0;
     flag = 0;
     while (i < len) 
     {
          if (*(dest+i) == ' ') 
          {
               flag = 1;
               break;
          }
          else
               i++;
     }
     
     if  (flag)
          *(dest+i) = '\0';
     else
          *(dest+len) = '\0';
}
