/* ======================= Program Header ======================================
 PROGRAM-NAME   : PKQ5150A(중간정산 급여이체 파일생성)
 SYSTEM-NAME    : 급여
 SUBSYSTEM-NAME : 급여 이체
 Programmer     : 김태호
 Version        : 1.00
 Date           : 2010.04.16

Update Contents
   Version    date(yy.mm.dd)     programmer      description     relevant doc.no
   1.00       2010.04.16         김태호          최초개발본      설계명세서                                                    
============================================================================= */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
/*#include  "/hper/insa/edi/new/svccli/def.h"   dacom 상용mail 사용으로 인한 변경*/
#include "./../EDIsrc/include/clidef.h"  /* 2004.05.04. DSA2000*/

/* Dsa2000  추가.. 2004.02.24.*/
#include "hinsa_string.h"
#include "hinsa_date.h"
#include "hinsa_log.h"
#include "hinsa_oracle.h"
#include "hinsa_common.h"
#include "hinsa_macro.h"

#define  FAIL        -2
/* Dsa2000  추가..End.......*/

/*#define  DATA_DIR  "edi/bdata"*/
#define  MAXPERSON 5000

EXEC SQL INCLUDE sqlca;

EXEC SQL BEGIN DECLARE SECTION;
     char    paydate[8+1];
     char    caldate[8+1];
     char    bacode[3];
     char    bankcode[3];
     char    paybank[3];
     char    paybank1[3];
     char    empno[5];
     char    jobkind[3];
     char    cocode[11];
     char    reqdate[9];
     char    deddate[9];
     char    transcode[5];
     char    vancode[7];
     char    raninfo[12];
     char    sysinfo1[5];
     char    payacnt[20];
     char    payacnt1[20];
     char    copasswd[9];
     char    filename[80];
     int     seq;
     int     realpay;     /* 실지급액*/
     int     RecordCnt = 0;
     double  PaySum = 0;
     int     cRecordCnt = 0;
     double  cPaySum = 0;
EXEC SQL END   DECLARE SECTION;

FILE *fp = stdout;

char  FullName[80];
char  cmdline[256];
char  AcntBuf[MAXPERSON][20];
int   BufCnt = 0;
int   id;

/* HEADER  01/27/2000 6:02오후 */
char  companyCode[2+1];
char  dataCode[3+1];
char  receiverId[8+1];

/*=== dsa2000 2004.12. Rexec대체 서비스를 위한 =============*/
char  log_rundate[16]     = ""; 
char  log_progid[16]      = "";
char  log_writeman[5]     = "";
char  log_buff[100]       = "";
int   seqno               = 0; 

void main(argc,argv)
int argc;
char *argv[];
{        
     char FL_file[255];
     
     if  (argc != 8) {  /* /hper8/HINSA/proc/bin/Kbin/pkq5150a 05 0404051110.lst 20040402 20100331 D006 pkw1030g 2004110100000 */
          printf("[Usage] : pkq5150a 1.은행코드 2.파일명 3.지급일자 4.중간정산기산일    \n");
          printf("[Usage] :          4.작업자 5.프로그램ID  6.시작시간  \n");
          exit(1);
     }
           
     /*로그 디렉토리 생성 및 로그작업 */
     STRINIT(FL_file);
     strcpy(FL_file,"pkq5150a");
     
     hinsa_get_filename(1, FL_file);
     if  (hinsa_log_open(FL_file) == FAILURE)
     {
          hinsa_exit(0,"로그파일 생성에러로 인한 프로그램 종료...");
          return;
     }
         
     /* Dsa2000  2004.02.24.  **********************************/  
     /*DB_connect(id,0); */  
     hinsa_log_print(0,"중간정산금액이체 파일생성 프로그램 시작...[pkq5150a]");
     hinsa_db_connect();  /*DB Connect 실시..*/
     /* Dsa2000  수정 End......................................*/
     
     /*=== dsa2000 2004.12. Rexec대체 서비스를 위한 =============*/
     strcpy(log_writeman, argv[5]);
     strcpy(log_progid,   argv[6]);
     strcpy(log_rundate,  argv[7]);  
       
     EXEC SQL DECLARE log_db DATABASE;    
     hinsa_log_db_connect();
     /*========================================================*/
     
     memset(AcntBuf,'\0',sizeof(AcntBuf));
     strcpy(bacode,argv[1]);
     strcpy(paydate,argv[3]);
     strcpy(caldate,argv[4]);
     memset(receiverId,'\0',sizeof(receiverId));
     memset(companyCode,'\0',sizeof(companyCode));
     memset(dataCode,'\0',sizeof(dataCode));
     
       
     EXEC SQL
     SELECT   RVCODE ,COGUCODE,INGUCODE
     INTO  :receiverId,:companyCode,:dataCode
     FROM   PKCLIENT
     WHERE  BACODE =:bacode;
     
     if  (sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
     {
          printf("[ERRCODE : %d] log 생성 Error  , bacode :%s\n",sqlca.sqlcode, bacode);
          unlink(FullName);
          sprintf(log_buff, "[ERRCODE : %d] log 생성 Error , bacode :%s\n",sqlca.sqlcode, bacode);
          Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
          exit(1);
     }    
     
     /*receiverId = 'ZEBTKNH';   이체테스트시에 사용하는 외환은행 아이디 dsa2000 */
  
/*===========================================================================================*/  
     CheckFile(argv[2]);
     
     MakeFile();
     
     fclose(fp);
     
     MakeLog();
     
     /* Dsa2000  2004.02.25.  hinsa_exit()에서 DB Commit & DB접속종료함.*/
     if  (sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
     {
          sprintf(log_buff, "ERROR ====== [작업 실패] =====");
          Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
          error_quit("ERROR ====== [작업 실패] =====\n");
     }
     else
     {
          sprintf(log_buff, "OK ====== [중간정산 계산 작업성공] =====\n");
          Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
          hinsa_exit(0,"OK ====== [중간정산 계산 작업성공] =====\n");    
     }
  
}

MakeLog()
{

     EXEC SQL
     SELECT max(seqno)+1 INTO :seq
       FROM  pkmbalog;
     
     if  (sqlca.sqlcode != 0 && sqlca.sqlcode != 1403 && sqlca.sqlcode != -1405)
     {
          printf("[ERRCODE : %d] 일련번호 생성 Error\n",sqlca.sqlcode);
          unlink(FullName);
          sprintf(log_buff, "[ERRCODE : %d] 일련번호 생성 Error\n",sqlca.sqlcode);
          Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
          exit(1);
     }
     
     if  (sqlca.sqlcode == -1405)
          seq = 1;
     
     EXEC SQL 
     INSERT INTO pkmbalog (seqno,mbacode,paydate,workdate,fname,mmovecnt,mmoveamt,
                           cmovecnt,cmoveamt,movecnt,moveamt)
     VALUES (:seq,:bacode,:deddate,:reqdate,:filename,:RecordCnt-2-:cRecordCnt,:PaySum-:cPaySum,
       :cRecordCnt,:cPaySum,:RecordCnt-2,:PaySum);
     
     if  (sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
     {
          printf("[ERRCODE : %d] log 생성 Error2\n",sqlca.sqlcode);
          unlink(FullName);
          sprintf(log_buff, "[ERRCODE : %d] log 생성 Error2\n",sqlca.sqlcode);
          Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
          exit(1);
     }
     EXEC SQL commit;
}

MakeFile()
{
     MakeTrans();
     MakeHeader();
     MakeBody();
     MakeTail();
}

/* =============================================================================================
01/27/2000 5:43오후
DACOM에서 사용하는 HEADER 
   ============================================================================================= */
MakeTrans()
{
     char  buffer[81];
     /*<<HEADER>>BK01495 HS300NN001BK00007 */  
     memset(buffer,'\0',sizeof(buffer));
     /*  sprintf(buffer,"<<HEADER>>%-8s%2s%3sNN001%-8s\r\n",LOGIN_ID,companyCode,dataCode,receiverId);  dsa2000  2004.05.04*/
     sprintf(buffer,"<<HEADER>>%-8s%2s%3sNN001%-8s\r\n",MAGICLINKID,companyCode,dataCode,receiverId);  
     fprintf(fp,"%s",buffer);  
     printf("=======================\n",buffer);
     printf("buffer : [%s] \n",buffer);  
}

MakeHeader()
{
     char  buffer[81];
     
     EXEC SQL 
     SELECT  jobkind,cocode,reqdate,deddate,transcode,vancode,raninfo,sysinfo,
             copasswd
       INTO  :jobkind, :cocode, :reqdate, :deddate, :transcode, :vancode, :raninfo,
             :sysinfo1, copasswd
       FROM  pkclient
      WHERE  bacode = :bacode;
          
     if  (sqlca.sqlcode != 0 && sqlca.sqlcode != -1405)
     {
          printf("[ERRCODE : %d] 표제부 생성 Error\n",sqlca.sqlcode);
          fclose(fp);
          unlink(FullName);
          sprintf(log_buff, "[ERRCODE : %d] 표제부 생성 Error\n",sqlca.sqlcode);
          Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
          exit(1);
     }
     
     memset(buffer,'\0',sizeof(buffer));
     sprintf(buffer,   "%1s" ,"S");    /* 표제부   */
     sprintf(buffer+ 1,"%2s", jobkind);  /* 화일구분   */ 
     /*  sprintf(buffer+ 1,"%2s", "C2");  */  /* 화일구분   */ 
     sprintf(buffer+ 3,"%10s",cocode);  /* 발신기관   */
     sprintf(buffer+13,"%2s", bacode);  /* 수신은행   */
     
     /* 2003.05.07.  강륜종 Dsa2000  : 급여이체 파일전송을 다른 날짜로 전송을 원할때.. 
      이체화면의 의뢰일자만 바꾸고 작업하면 파일생성시 전송/이체 일자가 바뀌도록.... */
     /*  sprintf(buffer+15,"%6s", paydate+2);   전송일자   */
     /*  sprintf(buffer+21,"%6s", paydate+2);   이체일자   */    
     sprintf(buffer+15,"%6s", reqdate+2);  /* 전송일자   */
     sprintf(buffer+21,"%6s", deddate+2);  /* 이체일자   */
     
     sprintf(buffer+27,"%15s" ," ");    /* 이체모계좌   */
     sprintf(buffer+42,"%8s" ,copasswd);  /* 업체암호   */
     sprintf(buffer+50,"%1s" ,"1");    /* 지급차수   */
     sprintf(buffer+51,"%1s" ,"2");    /* 처리결과통보 */
     sprintf(buffer+52,"%1s" ,"1");    /* 재처리구분   */
     sprintf(buffer+53,"%4s" ,transcode);  /* 거래지점   */
     sprintf(buffer+57,"%6s" ,vancode);  /* VAN 사업자   */
     sprintf(buffer+63,"%11s",raninfo);  /* 업체임의사용 */
     sprintf(buffer+74,"%4s" , sysinfo1);  /* 시스템이용   */
     fprintf(fp,"%s\r\n",buffer);
     RecordCnt++;
    
}

MakeBody()
{

     /* 모계좌에 해당하는 자료 생성 */
     strcpy(bankcode,bacode);
     SetBody();
     
     /* 자계좌에 해당하는 자료 생성 */
     EXEC SQL DECLARE c2 CURSOR FOR 
     SELECT  bacode
       FROM  pkmbank
      WHERE  mbacode = :bacode and bacode <> :bacode
        and  bacode in (SELECT  paybank              
                          FROM  pkhmrhis
                         WHERE  mrtodate = :caldate
                      GROUP BY  paybank
                       )
      ORDER  BY bacode;
     
     EXEC SQL OPEN c2;
     if  (sqlca.sqlcode != 0 && sqlca.sqlcode != 1403 )
     {
          printf("[ERRCODE : %d] 타행은행 read 에러\n",sqlca.sqlcode);
          fclose(fp);
          unlink(FullName);
          sprintf(log_buff, "[ERRCODE : %d] 타행은행 read 에러\n",sqlca.sqlcode);
          Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
          exit(1);
     }
     
     while(1)
     {
          EXEC SQL FETCH c2 
          INTO :bankcode;
          
          if  (sqlca.sqlcode == 1403)
          {
               EXEC SQL CLOSE c2;
               return;
          }
          
          if  (sqlca.sqlcode != 0)
          {
          
               EXEC SQL CLOSE c2;
               printf("[ERRCODE : %d] 타행 에러\n",sqlca.sqlcode);
               fclose(fp);
               unlink(FullName);
               sprintf(log_buff, "[ERRCODE : %d] 타행 에러\n",sqlca.sqlcode);
               Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
               exit(1);
          }
          SetBody();
     }
}

SetBody()
{
     /* char buffer[81]; 이체계좌별로  */
   
     /* 강륜종 Dsa2000  : 급여이체 파일전송을 다른 날짜로 전송을 원할때..
      :paydate  ==> '20030506' 으로 수정   */
     EXEC SQL DECLARE c1 CURSOR FOR
     SELECT  MAX(empno),paybank,
             payacnt,SUM(NVL(realamt,0)) 
       FROM  pkhmrhis
      WHERE  paybank = :bankcode
        AND  mrtodate = :caldate
      GROUP  BY paybank,payacnt;
     
    /*select MAX(empno),paybank,
             payacnt,SUM(NVL(retreal,0)) from pkhmrhis
      where mrtodate ='20100331'
      GROUP BY paybank,payacnt     
     
     EXEC SQL DECLARE c1 CURSOR FOR
     SELECT  empno, paybank, payacnt,realpay
     FROM  pkmilpay
     WHERE  paybank  = :bankcode
     ORDER BY empno;
     printf("[ERRCODE : %s] 이체금액 setting 에러\n",bankcode);
     */
     
     EXEC SQL OPEN c1;
     if  (sqlca.sqlcode != 0 && sqlca.sqlcode != 1403 )
     {
          printf("[ERRCODE : %d] 이체금액 setting 에러\n",sqlca.sqlcode);
          fclose(fp);
          unlink(FullName);
          sprintf(log_buff, "[ERRCODE : %d] 이체금액 setting 에러\n",sqlca.sqlcode);
          Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
          exit(1);
     }
   
     while(1)
     {
          InitVal();
          EXEC SQL FETCH c1
          INTO :empno, :paybank,
               :payacnt, realpay;
               
          
          /* **********
          printf("leerk empno%s sqlcode =>%d,%s,%s 읽기 에러\n",empno,sqlca.sqlcode,caldate,paybank);     
          printf("leerk empno%s sqlcode =>%d 읽기 에러\n",empno,sqlca.sqlcode);
          * ********** */
          if  (sqlca.sqlcode == 1403)
          {
               EXEC SQL CLOSE c1;
               return;
          }
          
          if  (sqlca.sqlcode != 0)
          {
          
               EXEC SQL CLOSE c1;
               printf("[ERRCODE : %d] 이체금액 읽기 에러\n",sqlca.sqlcode);
               fclose(fp);
               unlink(FullName);
               sprintf(log_buff, "[ERRCODE : %d] 이체금액 읽기 에러\n",sqlca.sqlcode);
               Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
               exit(1);
          }
          SetVal();
     }
}

InitVal()
{
     memset(payacnt ,'\0',sizeof(payacnt));
     memset(paybank ,'\0',sizeof(paybank));
     realpay = 0;
}

SetVal()
{
     char buffer[81]; 
     
     sprintf(buffer,   "%s", "D");
     sprintf(buffer+1, "%-2s", bankcode);
     StripBar();
     sprintf(buffer+3, "%-15s",payacnt);
     strcpy(AcntBuf[BufCnt],payacnt);
     sprintf(buffer+18,"%s","31");
     sprintf(buffer+20,"%011d",realpay);
     PaySum += realpay;
     sprintf(buffer+31,"%-2s", deddate+6);
     sprintf(buffer+33,"%s", " ");
     sprintf(buffer+34,"%4s", " ");
     sprintf(buffer+38,"%10s"," ");
     sprintf(buffer+48,"%24s"," ");
     sprintf(buffer+72,"%4s"," ");
     sprintf(buffer+76,"%2s"," ");
     buffer[78] = '\0';
     fprintf(fp,"%s\r\n",buffer);
     RecordCnt++;
     BufCnt++;
     
     /* 자계좌에 해당건수 ,금액구하기 */
     if  (strcmp(bacode,bankcode) != 0)
     {
          cRecordCnt++;
          cPaySum += realpay;
     }
}  

StripBar()
{
     char  TmpStr[81];
     int i = 0;
     int j = 0;
     
     memset(TmpStr,'\0',sizeof(TmpStr));  
     strcpy(TmpStr,payacnt);
     while(TmpStr[j])
     {
          if  (TmpStr[j] != '-')
          {
               payacnt[i] = TmpStr[j];
               i++;
          }
          j++;
     }
     payacnt[i] = '\0';
}

MakeTail()
{
     char buffer[81];
     
     memset(buffer,'\0',sizeof(buffer));
     sprintf(buffer,  "%s", "E");    /* 식별코드  */
     RecordCnt++;
     sprintf(buffer+1,  "%07d",RecordCnt);  /* Record 수  */  
     sprintf(buffer+8,  "%07d",RecordCnt-2);  /* 의뢰건수  */
     sprintf(buffer+15, "%013.0f",PaySum);  /* 의뢰금액  */  
     sprintf(buffer+28, "%07d", 0);    /* 정상처리건수  */
     sprintf(buffer+35, "%013.0f",0.0);  /* 정상처리금액 */
     sprintf(buffer+48, "%07d",0);    /* 미처리금액  */
     sprintf(buffer+55, "%013.0f",0.0);  /* 미처리금액  */
     if  (strcmp(bacode,"05") == 0)
     {
          sprintf(buffer+68, "%04d",MakeBokjiho()); /* 복기호부호  */
          sprintf(buffer+72, "%4s"," ");    
     
     }
     else if (strcmp(bacode,"24") == 0)
     {
          sprintf(buffer+68, "%04d",MakeBokjiho()); /* 복기호부호  */
          sprintf(buffer+72, "%4s"," ");    
     
     }
     else
          sprintf(buffer+68, "%08d",MakeBokjiho()); /* 복기호부호  */
     sprintf(buffer+76, "%2s"," ");    /* 업체임의정보  */
     buffer[78] = '\0';
     fprintf(fp,"%s\r\n",buffer);
}

MakeBokjiho()
{
     int i;
     double a = 0;
     double b = 0;
     double c = 0;
     double d = 0;
     double A = 0;
     double B = 0;
     double C = 0;
     double D = 0;
     double D1 = 0;
     double X = 0;
     double t = 0;
     int    result = 0;
     char  tmp[80];
     /*
       FILE *ffp;
     
     ffp = fopen("LeeTst","w");
     */
   
     if  (strcmp(bacode,"05") == 0)
     {
          for (i=0; i<BufCnt; ++i)
          {  
               memset(tmp,'\0',sizeof(tmp));  
               sprintf(tmp,"%.3s",AcntBuf[i]);
               a += atof(tmp);
               
               memset(tmp,'\0',sizeof(tmp));  
               sprintf(tmp,"%.2s",&(AcntBuf[i][3]));
               t = atof(tmp);
               if ((t < 10) && (tmp[0] != '0'))
                 t = t*10;
               b += t;
               
               memset(tmp,'\0',sizeof(tmp));  
               sprintf(tmp,"%.5s",&(AcntBuf[i][5]));
               c += atof(tmp);
               
               memset(tmp,'\0',sizeof(tmp));  
               sprintf(tmp,"%.1s",&(AcntBuf[i][10]));
               d += atof(tmp);
   /*
   fprintf(ffp,"%5d : %15s %10.0f %10.0f\n",i+1,AcntBuf[i],t,a+b+c+d);
   */
          }
          A = a + b + c +d;
   /*
   fclose(ffp);
   */
   
               B = RecordCnt -2;
               C = PaySum;
               D = atof(deddate);
               D1= atoi(deddate+4);
               X = (A+B+C+D) / D1;
               result = ((int)X) % 10000;     
     }
     else if (strcmp(bacode,"24") == 0)
     {
          result = 1111;
     }
     return result;
}

CheckFile(fname)
char *fname;
{
     char *DATA_DIR;  
     DATA_DIR = hinsa_home();
     strcat(DATA_DIR,"/data/EDIdata");
     
     memset(FullName,'\0',sizeof(FullName));
     sprintf(FullName,"%s/%s",DATA_DIR,fname);
     
     strcpy(filename,fname);
     
     fp = fopen(FullName,"r");
     if  (fp  != NULL)
     {
          printf("[ERRCODE : %d] 파일이 이미 존재합니다. 다른이름을 지정하십시요\n",sqlca.sqlcode);
          fclose(fp);
          sprintf(log_buff, "[ERRCODE : %d] 파일이 이미 존재합니다. 다른이름을 지정하십시요\n",sqlca.sqlcode);
          Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
          exit(1);
     }
     
     fp = fopen(FullName,"w");
     if  (fp == NULL)
     {
          printf("[ERRCODE : %d] 파일을 생성할수 없습니다\n",sqlca.sqlcode);
          fclose(fp);
          sprintf(log_buff, "[ERRCODE : %d] 파일이 이미 존재합니다. 다른이름을 지정하십시요\n",sqlca.sqlcode);
          Write_batlog(seqno++, log_buff);   /*dsa2000 Rexec 대체*/
          exit(1);
     }
}

/*=== dsa2000 2004.12. Rexec대체 서비스를 위한 =====================================*/
int Write_batlog(int seqno, char *message)
{  
     EXEC SQL AT log_db 
     INSERT INTO PYBATLOG
     VALUES (:log_rundate, :log_progid, :seqno, :log_writeman, :message);

     if  ((sqlca.sqlcode != 1403) && (sqlca.sqlcode != 0)) 
     {  
          printf("ERROR_CODE : %d, pybatlog Insert Error. \n", sqlca.sqlcode);    
          return(FAIL);
     }                        
                        
     EXEC SQL AT log_db COMMIT WORK ;  
}
