/* ======================= Program Header ======================================
 PROGRAM-NAME   : pkz4021g(임원 퇴직자 월급여 계산)
 SYSTEM-NAME    : 급여
 SUBSYSTEM-NAME : 임원 퇴직정산
 Programmer     : 강륜종
 Version        : 1.00
 Date           : 2008.12

hinsacc pkz4021g
mv pkz4021g ~/HINSA/proc/bin/Kbin

Update Contents
 Version  date(yy.mm.dd)  programmer   description            relevant doc.no
  1.00     2008.12        강륜종      최초개발본             pkz2070g.pc 기반으로 생성.
============================================================================= */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <time.h>
#include "hinsa_macro.h"
#include "hinsa_string.h"
#include "hinsa_date.h"
#include "hinsa_log.h"
#include "hinsa_oracle.h"
#include "hinsa_common.h"

#define  FAIL        -2

EXEC SQL INCLUDE sqlca;
EXEC SQL BEGIN DECLARE SECTION;
  char  workyymmdd[9];
  char  ovtmyymm[7];
  char  DayOfWeek[4];
  char  tempdate[9];
  char  LastDay[3];
  char  HoliDate[9];
  char  empno[5];
  char  bldcode[3];
  char  retdate[9];
  int   mcarday;
  char  GSempno[5];
  double  mcarnotax;
EXEC SQL END   DECLARE SECTION;

FILE *fp = stdout;

enum  { WEEKDAY=0, WEEKEND=1 } day[33];
char  cmdline[256];
int   db;
int   id;
char  UserId[20];

char  log_rundate[16] = ""; 
char  log_progid[16]  = "";
char  log_writeman[5] = "";
char  log_buff[100]   = "";
char  calcempno[5]    = "";
int   seqno = 0; 
char  president_empno[5]= ""; /* 사장님사번           */  

void main(argc,argv)
int argc;
char *argv[];
{
     char FL_file[255];
               
     if (argc != 5) {  /* /hper/insa/HINSA/proc/bin/Kbin/pkz4021g D006 pkz4021g M112 200812310000 */
              printf("[Usage] : pkz4021g  1.작업자사번 2.프로그램ID 3.특정사번만 계산시 사번 4.시작시간 \n");  
              exit(1);
     }
     
     memset(UserId,'\0',sizeof(UserId));
     strcpy(UserId,argv[2]);
     
     /*로그 디렉토리 생성 및 로그작업 */
     STRINIT(FL_file);
     strcpy(FL_file,"pkz4021g");
     
     hinsa_get_filename(1, FL_file);
     if (hinsa_log_open(FL_file) == FAILURE)
     {
          hinsa_exit(0,"로그파일 생성에러로 인한 프로그램 종료...");
          return;
     }
         
     hinsa_log_print(0,"퇴직자 월급여 계산 시작...");                       
     hinsa_db_connect();  /*DB Connect 실시..*/
     
     strcpy(log_writeman, argv[1]);
     strcpy(log_progid,   argv[2]);
     strcpy(calcempno,    argv[3]);
     strcpy(log_rundate,  argv[4]);
       
     EXEC SQL DECLARE log_db DATABASE;    
     hinsa_log_db_connect();
     
     sprintf(GSempno,"%4s",argv[1]);
     
     CalcPay();
     
     /* hinsa_exit()에서 DB Commit & DB접속종료함.*/
     if ( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
     {
          sprintf(log_buff, "ERROR ====== [작업 실패] =====");
          Write_batlog(seqno++, log_buff);   
          error_quit("ERROR ====== [작업 실패] =====");
     }
     else  
     {
          sprintf(log_buff, "OK ====== [퇴직월 급여 계산 작업이 성공] =====");
          Write_batlog(seqno++, log_buff);
          hinsa_exit(0,"OK ====== [퇴직월 급여 계산 작업이 성공] =====");
     }  
}

CalcPay()
{
     char *HOMEDIR;
     
     HOMEDIR = hinsa_home();  /* "/hper/insa/HINSA" 읽어오기...*/
     strcat(HOMEDIR,"/proc");
     
     printf("\n 1. 기본사항 갱신 중 ....");
     sprintf(log_buff, "\n 1. 기본사항 갱신 중 ....");
     Write_batlog(seqno++, log_buff); 
     
     /* Clear */
     EXEC   SQL
     UPDATE PKZRTMAS
        set FIXPAY     = 0,   SBONAMT    = 0,   BOKJISUPAMT= 0, 
            AIDAMT3    = 0,   MCARAMT    = 0,   MCARTAXAMT = 0, 
            TAXPAY     = 0,   NOTAXPAY   = 0,   TICKETAMT  = 0, 
            ANUDAMT    = 0,   MEDDAMT    = 0,   EMPAMT     = 0, 
            PAYSUM     = 0,   DEDTOT     = 0,   REALPAY    = 0
      Where Empno like :calcempno;
      
     
     /*급여마스터로부터 월정연봉,가족수당을 셋팅한다.  */
     printf("\n 2. 지급금 갱신 중 ....");
     sprintf(log_buff, "\n 2. 지급금 갱신 중 ....");
     Write_batlog(seqno++, log_buff); 
     
     EXEC SQL
     UPDATE PKZRTMAS p
        SET FIXPAY
          = (SELECT CEIL(NVL(FIXPAY ,0) /
                         TO_CHAR(LAST_DAY(TO_DATE(P.RETDATE,'YYYYMMDD')),'DD') *
                         TO_CHAR(TO_DATE(P.RETDATE,'YYYYMMDD'),'DD')   )
               FROM PKZMPMAS R
              WHERE P.EMPNO=R.EMPNO)
      WHERE  Empno like :calcempno;
      
     if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
     {  err_print(sqlca.sqlcode,"2. 인사자료 갱신 ERROR");
       sprintf(log_buff, "2. 인사자료 갱신 ERROR");
        Write_batlog(seqno++, log_buff); 
       exit(1);
     }

     /* =========================================================================
        FIXPAY, FAMIAMT 일할계산 추가.   퇴직일이 말일이 아닌 경우만 급여환수를 한다.
     ============================================================================= */
     EXEC SQL
     UPDATE PKZRTMAS p
        set (FIXPAY, MCARAMT)
          = (SELECT CEIL(NVL(FIXPAY ,0) /
                         TO_CHAR(LAST_DAY(TO_DATE(P.RETDATE,'YYYYMMDD')),'DD')*
                        (TO_CHAR(LAST_DAY(TO_DATE(P.RETDATE,'YYYYMMDD')),'DD') - TO_CHAR(TO_DATE(P.RETDATE,'YYYYMMDD'),'DD') )
                         ) * -1,
                    CEIL(NVL(MCARAMT ,0) /
                         TO_CHAR(LAST_DAY(TO_DATE(P.RETDATE,'YYYYMMDD')),'DD')*
                        (TO_CHAR(LAST_DAY(TO_DATE(P.RETDATE,'YYYYMMDD')),'DD') - TO_CHAR(TO_DATE(P.RETDATE,'YYYYMMDD'),'DD') )
                         ) * -1
               FROM PKZHPHIS R
              WHERE P.EMPNO = R.EMPNO
                AND PAYDATE = SUBSTR(RETDATE,1,6))
     WHERE  RETDATE <> TO_CHAR(LAST_DAY(TO_DATE(SUBSTR(RETDATE,1,6),'YYYYMM')),'YYYYMMDD')
       AND Empno like :calcempno;
       
     if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
     {  
         err_print(sqlca.sqlcode,"2.2 인사자료 갱신 ERROR 지급한 급여환수 ");
         sprintf(log_buff, "2.2 인사자료 갱신 ERROR 지급한 급여환수 ");
         Write_batlog(seqno++, log_buff); 
         exit(1);
     }
     
     EXEC SQL
     UPDATE  PKZRTMAS p
        SET (MEDDAMT,  ANUDAMT , BOKJISUPAMT)
          = (SELECT NVL(MEDDAMT,0), NVL(ANUDAMT,0), NVL(BOKJISUPAMT,0)
               FROM PKZMPMAS R
              WHERE P.EMPNO=R.EMPNO)
      WHERE  Empno like :calcempno; 
      
     if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
     {  err_print(sqlca.sqlcode,"3. 인사자료 갱신 ERROR");
       sprintf(log_buff, "3. 인사자료 갱신 ERROR");
        Write_batlog(seqno++, log_buff); 
       exit(1);
     }
     
     /*  퇴사일이 14일 이전이면 복지연금지원금을 0으로 한다*/
     EXEC SQL
     UPDATE PKZRTMAS
        SET BOKJISUPAMT = 0
      WHERE SUBSTR(RETDATE,7,2) <= '14'
        AND Empno like :calcempno;
        
     if ( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
     {  
         err_print(sqlca.sqlcode,"3.0 복지연금 setting Error");
         sprintf(log_buff, "3.0 복지연금 setting Error");
         Write_batlog(seqno++, log_buff); 
         exit(1);
     }
     
     
     EXEC SQL
     SELECT  MAX(RETDATE) 
       INTO :workyymmdd
       FROM  PKZRTMAS
      Where  Empno like :calcempno;  
      
     if ( sqlca.sqlcode != 0 )
     {  
         err_print(sqlca.sqlcode,"4. 퇴직월 추출 Error");
         sprintf(log_buff, "4. 퇴직월 추출 Error");
         Write_batlog(seqno++, log_buff); 
         exit(1);
     }
     
     SetCalendar(workyymmdd);
     
     printf("\n 3. 지급금(수당) 갱신 중 ....");
     sprintf(log_buff, "\n 3. 지급금(수당) 갱신 중 ....");
     Write_batlog(seqno++, log_buff); 
     
     /*  식대교통비를 계산한다. 식대교통비는 퇴직월 1일 부터 퇴직일까지의 일수를 구하고
         이에서 공휴일과일요일을 제외한 날수에 식대교통비 기준금액에 곱하여 구한다.*/
     EXEC SQL DECLARE  c1 CURSOR FOR
     SELECT EMPNO, RETDATE, BLDCODE
       FROM PKZRTMAS
      WHERE Empno like :calcempno;
     
     EXEC SQL OPEN c1;
     
     if ( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
     {  
         err_print(sqlca.sqlcode,"5. 퇴직일 Read Error");
         sprintf(log_buff, "5. 퇴직일 Read Error");
         Write_batlog(seqno++, log_buff); 
         exit(1);
     }
     
     while(1)
     {
          EXEC SQL FETCH c1 into
          :empno, :retdate, :bldcode;
          
          if (sqlca.sqlcode == 1403)
          {  
              EXEC SQL close c1;
              break;
          }
          
          /* =========================================================================
           식대교통비 계산로직
          ============================================================================= */
          EXEC SQL
          UPDATE PKZRTMAS p
             SET MCARAMT 
               = (SELECT CEIL((LUNCHAMT+TRAFAMT+LUNCHADD+TRAFADD+TICKETAMT) 
                             / TO_CHAR(LAST_DAY(TO_DATE(P.RETDATE,'YYYYMMDD')),'DD') *
                               TO_CHAR(TO_DATE(P.RETDATE,'YYYYMMDD'),'DD') * 25 )
                    FROM PKCPBLD
                   WHERE BLDCODE = :bldcode)
           WHERE EMPNO = :empno ;
           
          if ( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
          {  
              err_print(sqlca.sqlcode,"6. 식교비 setting Error");
              sprintf(log_buff, "6. 식교비 setting Error");
              Write_batlog(seqno++, log_buff); 
              exit(1);
          }
          
          EXEC SQL
          UPDATE PKZRTMAS p
             SET MCARAMT = CEIL(250000
                              / TO_CHAR(LAST_DAY(TO_DATE(P.RETDATE,'YYYYMMDD')),'DD') *
                                TO_CHAR(TO_DATE(P.RETDATE,'YYYYMMDD'),'DD')  )
           WHERE EMPNO = :empno ;
             
          if ( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
          {  
              err_print(sqlca.sqlcode,"6. 식교비 setting Error");
              sprintf(log_buff, "6. 식교비 setting Error");
              Write_batlog(seqno++, log_buff); 
              exit(1);
          }
     
     }  /* END OF */
     
       
     EXEC SQL
     SELECT  MCARNOTAX
       INTO  :mcarnotax
       FROM  PKCPBAS ;
     
     EXEC SQL
     UPDATE PKZRTMAS p
        SET MCARAMT = NVL(MCARAMT,0),        
            MBONAMT = NVL(MBONAMT,0)
      WHERE Empno like :calcempno;
     
     EXEC SQL
     UPDATE PKZRTMAS p
        SET MCARTAXAMT = MCARAMT - :mcarnotax
      WHERE MCARAMT >= :mcarnotax
        AND Empno like :calcempno;
     
     /*식당소재지역  100%과세 */
     EXEC SQL
     UPDATE PKZRTMAS P
        SET MCARTAXAMT 
          = (SELECT MCARAMT
               FROM PKZRTMAS A, PKCPBLD B
              WHERE A.BLDCODE = B.BLDCODE
                AND A.EMPNO   = P.EMPNO
                AND RESTYN    = 'Y' )
      WHERE EMPNO IN (SELECT A.EMPNO FROM   PKZRTMAS A, PKCPBLD B
                       WHERE A.BLDCODE = B.BLDCODE
                         AND RESTYN ='Y' )
        AND Empno like :calcempno;
     
     EXEC SQL
     UPDATE PKZRTMAS P
        SET MCARTAXAMT = 0
      WHERE MCARAMT < :mcarnotax
        AND Empno like :calcempno;
     

     /* =========================================================================
        계산항목clear추가   
     ============================================================================= */
     EXEC   SQL
     UPDATE PKZRTMAS
        SET PAYSUM = NVL(FIXPAY,0)    + NVL(MCARAMT,0)   + NVL(SBONAMT,0)   + NVL(BOKJISUPAMT,0) + 
                     NVL(AIDAMT3,0)   + 0                + 0                + 0                 
      Where Empno like :calcempno;
                            
     if ( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
     {  
         err_print(sqlca.sqlcode,"7. 급여총액 setting Error");
         sprintf(log_buff, "7. 급여총액 setting Error");
         Write_batlog(seqno++, log_buff); 
         exit(1);
     }
     
     printf("\n 4. 공제금  갱신 중 ....");
     sprintf(log_buff, "\n 4. 공제금  갱신 중 ....");
     Write_batlog(seqno++, log_buff); 
     

     /* 고용보험료 계산  ***************************************************  */
     set_empamt();
      
     
     /*  공제총액 계산  ****************************************************  */
     EXEC  SQL
     UPDATE PKZRTMAS p
        SET DEDTOT = NVL(MEDDAMT,0) + NVL(EMPAMT,0) + NVL(ANUDAMT,0)
      Where Empno like :calcempno;     
     
     if ( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
     {  
         err_print(sqlca.sqlcode,"11. 공제총액 setting Error");
         sprintf(log_buff, "11. 공제총액 setting Error");
         Write_batlog(seqno++, log_buff); 
         exit(1);
     }
     
     /*  실지급액 계산  **************************************************** */
     EXEC  SQL
     UPDATE PKZRTMAS p
        SET REALPAY = NVL(PAYSUM,0) - NVL(DEDTOT,0)
      Where Empno like :calcempno;     
     
     if ( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
     {  
         err_print(sqlca.sqlcode,"12. 실지급액 setting Error");
         sprintf(log_buff, "12. 실지급액 setting Error");
         Write_batlog(seqno++, log_buff); 
         exit(1);
     }

}

SetCalendar(workdate)
char *workdate;
{
     int i;
     
     for(i=0 ; i< 33 ; ++i)
         day[i] = WEEKDAY;
     
     memset(tempdate,'\0',sizeof(tempdate));
     memset(DayOfWeek,'\0',sizeof(DayOfWeek));
     memset(LastDay,'\0',sizeof(LastDay));
     memset(ovtmyymm,'\0',sizeof(ovtmyymm));
     sprintf(tempdate,"%.6s%02d",workdate,1);
     
     EXEC  SQL
     SELECT  to_char(add_months(to_date(:tempdate,'YYYYMMDD'),-1),'YYYYMM')
       INTO :ovtmyymm
       FROM  DUAL;
     
     EXEC   SQL
     SELECT  to_char(last_day(to_date(:tempdate,'YYYYMMDD')),'DD')
       INTO :LastDay
       FROM  DUAL;
     
     for( i = 1 ; i <= atoi(LastDay) ; ++i)
     {
          sprintf(tempdate,"%.6s%02d",workdate,i);
          EXEC SQL
          SELECT  to_char(to_date(:tempdate,'YYYYMMDD'),'DY')
            INTO :DayOfWeek
            FROM  DUAL;
            
          if (strcmp(DayOfWeek,"SUN")==0)
              day[i] = WEEKEND;
          
          EXEC   SQL
          SELECT  HOLIDATE
            INTO :HoliDate
            FROM  PKCHOLI
           WHERE  HOLIDATE = :tempdate;
          
          if (sqlca.sqlcode == 0)
              day[i] = WEEKEND;
     }
}

/*  퇴직일까지 식교비 일수 계산  ***************************** */
CalMcarday(workdate)
char *workdate;
{
     char tempday[3];
     int  carday;
     int  i;
     
     memset(tempday,'\0',sizeof(tempday));
     sprintf(tempday,"%.2s",workdate+6);
     
     carday = atoi(tempday);
     
     for(i = 1; i <= atoi(tempday); ++i)
     {
          if (day[i] == WEEKEND)
              carday --;
     }
     
     return carday;
}


/* ===============================================================================
    고용보험료 
================================================================================= */
set_empamt()
{
     EXEC SQL 
     select  trim(presempno)
       into  :president_empno
       from  pkcpbas;
       
     if (sqlca.sqlcode != 0)
     {
        print_errmsg(sqlca.sqlcode,"사장님사번을 구하는 과정에서 Error...");
        sprintf(log_buff, "사장님사번을 구하는 과정에서 Error."); 
        Write_batlog(seqno++, log_buff);                        
        error_quit("작업실패...");
     }
     	
     EXEC SQL
     UPDATE PKZRTMAS
        SET empamt = 0;
        
     EXEC SQL  /* 과세총액 기준으로 계산로직 변경 2011.01. */
     UPDATE PKZRTMAS A
        SET EMPAMT = (SELECT nvl( FLOOR( A.PAYSUM * B.emprate / 100 / 10 ) * 10 , 0 )
                        FROM pkzcpbas B )              
      Where '19'||substr(juminid,1,4) > to_char(add_months(sysdate,-720),'yyyymm') /*60세초과 고용보험료 납부안함*/
        AND Empno <> :president_empno;                                             /*사장님   고용보험료 납부안함*/
      
     if ( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
     {  
        err_print(sqlca.sqlcode,"8. 고용 보험료 setting Error");
        sprintf(log_buff, "8. 고용 보험료 setting Error");
        Write_batlog(seqno++, log_buff); 
        exit(1);
     }
}

int Write_batlog(int seqno, char *message)
{  
     EXEC SQL AT log_db 
     INSERT INTO PYBATLOG
     VALUES (:log_rundate, :log_progid, :seqno, :log_writeman, :message);

     if ((sqlca.sqlcode != 1403) && (sqlca.sqlcode != 0)) 
     {  
          printf("ERROR_CODE : %d, pybatlog Insert Error. \n", sqlca.sqlcode);    
          return(FAIL);
     }                        
                        
     EXEC SQL AT log_db COMMIT WORK ;  
}


err_print(errcode,str)
int  errcode;
char *str;
{
    fprintf(fp,"[ERRCODE : %d] %s\n",errcode,str);
}