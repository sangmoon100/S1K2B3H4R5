/* ======================= Program Header ======================================
 PROGRAM-NAME   : pkz10501.pc(임원 급여생성)
 SYSTEM-NAME    : 급여
 SUBSYSTEM-NAME : 급여계산
 Programmer     : 강륜종
 Version        : 1.00
 Date           : 2008.05.

hinsacc pkz10501
mv pkz10501 ~/HINSA/proc/bin/Kbin

Update Contents
Version  date(yy.mm.dd) programmer      description     relevant doc.no
   1.00     2008.05.      강륜종        pkc10801.pc를 기준으로 임원용 개발
============================================================================= */

#include <string.h> 
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <time.h>
#include "hinsa_macro.h"
#include "hinsa_string.h"
#include "hinsa_date.h"
#include "hinsa_log.h"
#include "hinsa_oracle.h"
#include "hinsa_common.h"

#define  FAIL        -2

/********* Function Prototype 정의 ************/
void  Generate_Records();
void  Get_Criteria();
void  Calc_BasicGongje();
void  Update_Record3();
void  Process_Calc();
void  Get_Pays();
void  Get_DedSum();
void  print_errmsg(int errcode, char *errmsg);

/*********************************************
  Global Variable
**********************************************/
EXEC SQL BEGIN DECLARE SECTION;
    /* 당월급여내역  (PKMPCALC) 참조 변수                 */
    char    empno[5]        = ""; /* 사    번              */
    char    korname[13]     = ""; /* 성    명              */
    char    juminid[13+1]   = ""; /* 주민등록번호          */  
    char    paydate[9]      = ""; /* 급 여 지 급 월       */    
    char    paycl[3+1]      = ""; /* BAND                 */
    char    payra[3+1]      = ""; /* 직책                 */
    char    payyn[2]        = ""; /* 급여지급여부         */
    
    double  fixpay;               /* 월정급여             */
    double  odamt;                /* 운전지원금(총액)     */
    double  odtaxamt;             /* 운전지원금(과세)     */
    double  tmp_anudamt;          /* 국민연금 누계액      */   
    double  empldamt;             /* 고용보험료           */  
    double  dedsum;               /* 공제액계             */
    
    double  basicded;             /* 기초공제액           */
    double  mateded;              /* 배우자공제액          */
    double  famided;              /* 부양자공제액          */
    double  obsded;               /* 장애자공제액          */
    double  silverded;            /* 경로우대장애액       */
    double  womanded;             /* 부녀자공제액         */
    double  eduded;               /* 자녀양육비공제액     */
    double  speded;               /* 특별공제액           */  
    double  standded;             /* 표준공제액           */  
    double  fewded1;              /* 소수부양자공제액1     */
    double  fewded2;              /* 소수부양자공제액2     */
    double  etcded1;              /* 기타공제액1          */
    double  etcded2;              /* 기타공제액2          */
    double  etcded3;              /* 기타공제액3          */
    double  taxpay;               /* 과세급여             */
    double  notaxpay;             /* 비과세급여           */
    double  paysum;               /* 지급총액             */
    double  taxpaysum;            /* 과세급여총액          */
    double  notaxpaysum;          /* 비과세급여총액       */
        
    char    writeman[5]       = ""; /* 최종작업자           */  
    char    president_empno[5]= ""; /* 사장님사번           */  
        
    /*  급여마스터  (PKMPMAS) 참조 변수               */
    double  v_mateamt;            /* 가족수당(배우자)     */
    double  v_partamt;            /* 가족수당(존속)       */
    double  v_childamt;           /* 가족수당(비속)       */
    double  edudcnt;              /* 가족수(비속)         */
    double  matedcnt;             /* 배우자공제수         */
    double  famidcnt;             /* 부양자공제수         */
    double  obsdcnt;              /* 장애자공제수         */
    double  silverdcnt1;          /* 경로우대공제수(65)    */
    double  silverdcnt2;          /* 경로우대공제수(70)    */
    double  womandcnt;            /* 부녀자공제수         */
    double  childdedcnt;          /* 다자녀추가공제       */
    double  childded;             /* 다자녀추가공제액 */
    
    /*  급여지급기준(PKCPBAS) 참조 변수                    */
    double  cbasicded;            /* 기초공제액            */
    double  cmateded;             /* 배우자공제액          */
    double  cfamided;             /* 부양자공제액          */
    double  cobsded;              /* 장애자공제액          */
    double  csilverded;           /* 경로우대공제액(65)    */
    double  csilverded2;          /* 경로우대공제액(70)    */
    double  cwomanded;            /* 부녀자공제액          */
    double  ceduded;              /* 자녀양육비공제액      */
    double  cstdded;              /* 특별공제액            */
    double  cfewded1;             /* 소수부양자공제액1     */
    double  cfewded2;             /* 소수부양자공제액2     */
    double  cetcded1;             /* 다자녀추가공제1(2명일때 50) */
    double  cetcded2;             /* 다자녀추가공제1(2명 초과시 1인당 100)*/
    double  avgodamt;             /* O/D지원금    */
    double  csauamt;              /* 사우회비    */
    char    incentiveyn[2];       /* 상여만 따로 지급 여부*/
    double  paycount;             /* 급여받은 월수 (연간 근로소득 추정월수) */          
    char    frempno[5];
    char    toempno[5];
    double  childeduamt;          /* 자녀학자금   */
    double  medpayamt ;           /* 의료비가불금 */
    double  yuedunotax;           /* 유치원학자금 비과세 추가 dsa2000  2005.01.*/

EXEC SQL END   DECLARE SECTION;
EXEC SQL INCLUDE SQLCA;

int   i  = 0;
char  msg[500+1] = "";
int   id ;
char  dir[80];

char  log_rundate[16]     = ""; 
char  log_progid[16]      = "";
char  log_writeman[5]     = "";
char  log_buff[100]       = "";
int   seqno = 0; 

void main(int argc, char *argv[])
{
     char FL_file[255];
                       
     if (argc != 7) {  /* pkz10501 201012 M000 Q017 D006 pkz10501 2008052500000 */
         printf("[Usage] : pkz10501 1.급여년월 2.사번fr 3.사번to 4.작업자  5.프로그램ID 6.시작시간 \n");
         exit(1);
     }  
     
     /*로그 디렉토리 생성 및 로그작업 */
     STRINIT(FL_file);
     strcpy(FL_file,"pkz10501");
     
     hinsa_get_filename(1, FL_file);
     if (hinsa_log_open(FL_file) == FAILURE)
     {
          hinsa_exit(0,"로그파일 생성에러로 인한 프로그램 종료...");
          return;
     }
     
     sprintf(paydate ,"%.8s",argv[1]);
     sprintf(frempno ,"%.4s",argv[2]);
     sprintf(toempno ,"%.4s",argv[3]);
     sprintf(writeman,"%.4s",argv[4]);
     
     hinsa_log_print(0,"급여생성 프로그램 시작...[pkz10501]");        
     hinsa_db_connect();
     
     strcpy(log_writeman, argv[4]);
     strcpy(log_progid,   argv[5]);
     strcpy(log_rundate,  argv[6]);  
       
     EXEC SQL DECLARE log_db DATABASE;    
     hinsa_log_db_connect();
     
     
     EXEC SQL 
     lock table pkzmpmas in exclusive mode nowait;
     if (sqlca.sqlcode != 0) 
     {
         print_errmsg(sqlca.sqlcode,"다른 작업자가 DB수정 작업 중입니다...");
         sprintf(log_buff, " 다른 작업자가 DB수정 작업 중입니다..."); 
         Write_batlog(seqno++, log_buff);                               
         error_quit("작업실패...");
     }
       
     sprintf(log_buff, "월급여 생성중..."); 
     Write_batlog(seqno++, log_buff);              
     
     Generate_Records();                
       
     /* hinsa_exit()에서 DB Commit & DB접속종료함.*/
     if ( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
     {
          sprintf(log_buff, "ERROR ====== [작업 실패] ====="); 
          Write_batlog(seqno++, log_buff);                     
          error_quit("ERROR ====== [작업 실패] =====");
     }    
     else   
     {    
          sprintf(log_buff, "OK ====== [월급여생성 작업성공] ====="); 
          Write_batlog(seqno++, log_buff);                           
          hinsa_exit(0,"OK ====== [월급여생성 작업성공] =====");
     }        
}

/*****************************************************************************
  Generate_Records()
*****************************************************************************/
void Generate_Records()
{    
     Get_Criteria(); 
     printf("급여지급기준 읽기 완료\n");
     
     Calc_BasicGongje(); /* Calc_BasicGongje()안에 Update_Record2 루틴 포함.*/
       
     Update_Record3();   /* 상여금 분할개월수을 DB에 반영하는 함수. */
     
     Get_Pays();
     printf("과세 / 비과세 Sum 계산 완료\n");
     
     Process_Calc();     /* 고용보험 계산 */
       
     Get_DedSum();
     printf("공제금 합 계산 완료\n");
}

/*****************************************************************************
    급여기준테이블에서 급여계산에 필요한 값들을 얻는 함수.
*****************************************************************************/
void  Get_Criteria()
{
     EXEC SQL 
     SELECT   NVL(BASICDED,0),  
              NVL(MATEDED,0),      NVL(FAMIDED,0),      NVL(OBSDED,0),      
              NVL(SILVERDED,0),    NVL(SILVERDED2,0),   NVL(WOMANDED,0),   
              NVL(EDUDED,0),       NVL(STDDED,0),     
              NVL(ETCDED1,0),      NVL(ETCDED2,0),     
              NVL(AVGODAMT,0),     NVL(SAUAMT,0),       NVL(CHILDNOTAX,0)
       INTO  :cbasicded, 
             :cmateded,           :cfamided,           :cobsded, 
             :csilverded,         :csilverded2,        :cwomanded, 
             :ceduded,            :cstdded,            
             :cetcded1,           :cetcded2,           
             :avgodamt,           :csauamt,            :yuedunotax
       FROM  PKCPBAS;
     
     if (sqlca.sqlcode != 0) 
     {
          print_errmsg(sqlca.sqlcode,"급여지급기준 읽기오류...");
          sprintf(log_buff, " 급여지급기준 읽기오류....");
          Write_batlog(seqno++, log_buff);                    
          error_quit("작업실패...");
     }  
     
     Exec SQL
     Select  incentive
       Into :incentiveyn
       From  Pkzcpbas;
}

/*****************************************************************************
    기초 공제 내역을 계산하는 함수.
*****************************************************************************/
void  Calc_BasicGongje()
{
     EXEC SQL DECLARE cursor2 CURSOR FOR
     SELECT  EMPNO,              NVL(PAYCL,' '),
             NVL(MATEDCNT  ,0),  NVL(FAMIDCNT,0),     NVL(OBSDCNT,0), 
             NVL(SILVERDCNT1,0), NVL(SILVERDCNT2,0), 
             NVL(WOMANDCNT,0),   NVL(EDUDCNT,0),      NVL(CHILDDEDCNT,0),
             decode(substr(empdate,1,4),substr(:paydate,1,4),12-to_number(substr(empdate,5,2))+1,12) paycount
       FROM  PKZMPMAS A
      WHERE  EMPNO >= :frempno AND EMPNO <= :toempno
        AND  PAYYN = 'Y';
     
     EXEC SQL OPEN cursor2;
     if ((sqlca.sqlcode != 1403) && (sqlca.sqlcode != 0) && (sqlca.sqlcode != -1405))
     {
          print_errmsg(sqlca.sqlcode,"Calc_BasicGongje : Open Error...");
          sprintf(log_buff, "Calc_BasicGongje : Open Error...");
          Write_batlog(seqno++, log_buff);                
          EXEC SQL CLOSE cursor2;
          error_quit("작업실패...");
     }
     
     while(1) 
     {
          EXEC SQL FETCH cursor2 INTO 
              :empno,       :paycl,
              :matedcnt,    :famidcnt,    :obsdcnt,   
              :silverdcnt1, :silverdcnt2, 
              :womandcnt,   :edudcnt,     :childdedcnt,
              :paycount;
          
          if (sqlca.sqlcode == 1403) 
          {  
              EXEC SQL CLOSE cursor2;      
              return;
          }
          
          if (sqlca.sqlcode != 0) 
          {
              print_errmsg(sqlca.sqlcode,"Cursor cursor2 Data Fetch Error...");
              EXEC SQL CLOSE cursor2;
              error_quit("작업실패...");
          }
          
          if (Update_Record2() == FAIL)
          {
              EXEC SQL CLOSE cursor2;
              error_quit("작업실패...");
          }
     }
}

/***************************************************************************
  Update_Record2() Function.
****************************************************************************/
Update_Record2()
{  
     char    emp2[2] = "";
     
     if   (odamt > 0) odamt = avgodamt;
     else             odamt = 0;
     
     /*
     basicded  = cbasicded;
     mateded   = cmateded    * matedcnt;
     famided   = cfamided    * famidcnt;
     obsded    = cobsded     * obsdcnt;
     silverded = csilverded2 * silverdcnt2;
     womanded  = cwomanded   * womandcnt;
     eduded    = ceduded     * edudcnt;
     */
     /* 다자녀추가공제 */
     /*childded        = 0;
     if      (childdedcnt == 2)  childded = cetcded1;
     else if (childdedcnt >  2)  childded = cetcded2 * (childdedcnt - 2); */
     
     basicded  = 0;
     mateded   = 0;
     famided   = 0;
     obsded    = 0;
     silverded = 0;
     womanded  = 0;
     eduded    = 0;
     childded  = 0;  
 
     
     standded = 0 ;                  
     /*********************************************************/
     EXEC SQL
     update  pkzmpmas
        set  basicded  = :basicded, 
             mateded   = :mateded, 
             famided   = :famided, 
             obsded    = :obsded, 
             silverded = :silverded,
             womanded  = :womanded,
             childded  = :childded
      where  empno     = :empno;  
     
     if (sqlca.sqlcode == 0) 
          return(SUCCESS);
     else 
     {
          sprintf(log_buff, " Update_Record2 : empno...: %s", empno);
          Write_batlog(seqno++, log_buff);     
              
          print_errmsg(sqlca.sqlcode,"월급여화일 쓰기오류2(Update_Record2)...");
          sprintf(log_buff, " 월급여화일 쓰기오류2(Update_Record2)...");
          Write_batlog(seqno++, log_buff);     
          return(FAIL);
     }    
}

/*****************************************************************************
  국민연금료 공제(지급이력의 평균치 * 12로 공제)
*****************************************************************************/
void  Update_Record3()
{
     EXEC SQL BEGIN DECLARE SECTION;
     char  year[4+1]   = "";    
     EXEC SQL END DECLARE SECTION;
     
     sprintf(year,"%.4s",paydate);
     
     EXEC SQL DECLARE cursor3 CURSOR FOR
     select empno
       from pkzmpmas
      where upper(nvl(payyn,'N')) = 'Y'  
        and empno  >= :frempno and empno <= :toempno
      order by empno;
     
     EXEC SQL OPEN cursor3;
     if ((sqlca.sqlcode != 1403) && (sqlca.sqlcode != 0) && (sqlca.sqlcode != -1405))
     {
         print_errmsg(sqlca.sqlcode,"Cursor cursor3 Open Error...");
         sprintf(log_buff, " Cursor cursor3 Open Error...");
         Write_batlog(seqno++, log_buff);                
         EXEC SQL CLOSE cursor3;
         error_quit("작업실패...");
     }
     
     while (1) 
     {
          EXEC SQL FETCH cursor3 INTO :empno;
          
          if (sqlca.sqlcode == 1403) 
          {
               EXEC SQL CLOSE cursor3;
               return;
          }
          
          if (sqlca.sqlcode != 0) 
          {
               print_errmsg(sqlca.sqlcode,"Cursor cursor3 Data Fetch Error...");
               EXEC SQL CLOSE cursor3;
               error_quit("작업실패...");
          }
          
          EXEC SQL 
          select  nvl(sum(nvl(anudamt,0)),0)
            into :tmp_anudamt
            from  pkzhphis
           where  empno   = :empno
             and  paydate > :year 
             and  paydate < :paydate;
          
          if (sqlca.sqlcode != 0) 
          {
              print_errmsg(sqlca.sqlcode,"급여이력읽기 오류...");
              sprintf(log_buff, " 급여이력읽기 오류...."); 
              Write_batlog(seqno++, log_buff);                
              EXEC SQL CLOSE cursor3;
              error_quit("작업실패...");  
          }
          
          /*연금보험료 당월까지누적분(tmp_anudamt+anudamt)/급여개월수*12에서 
            당월연금보험료 * 12 로 변경 공제
          EXEC  SQL 
          update pkzmpmas     --set      anuded    = (:tmp_anudamt + nvl(anudamt,0)) / :paycount * 12 
             set anuded = nvl(anudamt,0) * 12
           where empno  = :empno;
          */
          
          EXEC  SQL 
          update pkzmpmas     /*set      anuded    = (:tmp_anudamt + nvl(anudamt,0)) / :paycount * 12 */
             set anuded = 0
           where empno  = :empno;

          if (sqlca.sqlcode != 0) 
          {
              print_errmsg(sqlca.sqlcode,"월급여화일 쓰기오류3...Update_Record3");
              sprintf(log_buff, " 월급여화일 쓰기오류3....Update_Record3"); 
              Write_batlog(seqno++, log_buff);                
              EXEC SQL CLOSE cursor3;
              error_quit("작업실패...");
          }
     
     }
}

/******************************************************************************
  과세급여, 과세상여, 비과세급여, 비과세상여를 구해 DB에 반영하는 함수. 
******************************************************************************/
void  Get_Pays()
{  
     EXEC SQL 
     update pkzmpmas
        set taxpaysum   = ( nvl(fixpay,0)      + nvl(mcartaxamt,0)  + nvl(sbonamt,0)     + 
                            nvl(aidamt3,0)     + nvl(bokjisupamt,0) + nvl(medsupamt,0)   +
                            nvl(selfedutax,0)  +                                            --nvl(trainsupamt,0) + 
                            nvl(taxpay1,0)     + nvl(taxpay2,0)     + nvl(taxpay3,0)     + 
                            nvl(taxpay4,0)     + nvl(taxpay5,0)     + nvl(taxpay6,0)     +
                            nvl(taxpay7,0)     + nvl(taxpay8,0)) , 
            notaxpaysum = ( nvl(mcaramt,0)     - nvl(mcartaxamt,0)  + 
                            nvl(selfeduamt,0)  - nvl(selfedutax,0)  +
                            nvl(notaxpay1,0)   + nvl(notaxpay2,0)   + 
                            nvl(notaxpay3,0)   + nvl(notaxpay4,0)    )
      where empno >= :frempno and  empno <= :toempno
        and upper(nvl(payyn,'N')) = 'Y';  
                           
     if (sqlca.sqlcode != 0) 
     {
         print_errmsg(sqlca.sqlcode,"월급여화일 쓰기오류6...");
         sprintf(log_buff, " 월급여화일 쓰기오류6...");
         Write_batlog(seqno++, log_buff);                
         error_quit("작업실패...");
     }
     
     EXEC SQL 
     update pkzmpmas
        set paysum  = taxpaysum + notaxpaysum
      where empno  >= :frempno and empno <= :toempno
        and upper(nvl(payyn,'N')) = 'Y';
      
     if (sqlca.sqlcode != 0) 
     {
         print_errmsg(sqlca.sqlcode,"월급여화일 쓰기오류7...");
         sprintf(log_buff, " 월급여화일 쓰기오류7....");
         Write_batlog(seqno++, log_buff);                
         error_quit("작업실패...");
     }
}

void  Process_Calc()
{
     EXEC SQL 
     select  trim(presempno)
       into  :president_empno
       from  pkcpbas;
       
     if (sqlca.sqlcode != 0)
     {
        print_errmsg(sqlca.sqlcode,"사장님사번을 구하는 과정에서 Error...");
        sprintf(log_buff, "사장님사번을 구하는 과정에서 Error."); 
        Write_batlog(seqno++, log_buff);                        
        error_quit("작업실패...");
     }
     
     EXEC SQL  /* 전체 초기화. */
     UPDATE Pkzmpmas
        SET empamt = 0;
        
     /*if (strcmp(incentiveyn, "Y") != 0 )  상여만 따로 나가는때에 고용보험료 0원으로 처리. => dsa2000 2018.03. 고용보험료는 항상 공제토록 주석처리*/
     {            
     	    /* 과세총액 기준으로 계산로직 변경 2011.01.(pkcemtbl 테이블 사용하는 로직 삭제) */
          EXEC SQL  
          UPDATE Pkzmpmas A
             SET EMPAMT = (SELECT nvl( FLOOR( A.taxpaysum * B.emprate / 100 / 10 ) * 10 , 0 )
                             FROM pkzcpbas B )
           WHERE EMPNO  >= :frempno AND EMPNO <= :toempno
             AND PAYYN   = 'Y'
             AND '19'||substr(juminid,1,4) > to_char(add_months(to_date(empdate,'YYYYMMDD'), -780),'yyyymm') /*해당 입사월 65세 이상일경우 고용보험 징수대상에서 제외 2014.02 한정미씨 요청*/
             AND Empno         <> :president_empno                                       /*사장님   고용보험료 납부안함*/
             AND Nvl(Trim(paydunm),' ') <> '사외이사';                                   /*사외이사 고용보험료 납부안함 dsa2000 2018.03. nvl처리 */
             /*AND Trim(paydunm) <> '사외이사';                                            사외이사 고용보험료 납부안함*/
           
          if ( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
          {  
              print_errmsg(sqlca.sqlcode,"8. 고용 보험료 setting Error");
              sprintf(log_buff, "8. 고용 보험료 setting Error"); 
              Write_batlog(seqno++, log_buff);                
              error_quit("작업실패...");              
          }
     }
}

/*****************************************************************************
  공제금합을 계산하는 루틴.
*****************************************************************************/
void  Get_DedSum()
{  
     /*상여만 지급시에는 국민연금/건강보험 0원으로 처리 추가 dsa2000  2018.03.*/
	   if (strcmp(incentiveyn, "Y") == 0 ) 
	   {
       EXEC SQL 
       update  pkzmpmas  
          set  anudamt =0, meddamt=0, longmtamt=0
        where  empno >= :frempno and empno <= :toempno
          and  upper(nvl(payyn,'N')) = 'Y';
                                 
       if (sqlca.sqlcode != 0) 
       {
           print_errmsg(sqlca.sqlcode,"월급여화일 쓰기오류8.5 ...");
           sprintf(log_buff, " 월급여화일 쓰기오류8.5..."); 
           Write_batlog(seqno++, log_buff);                
           error_quit("작업실패...");
       }
	   }/*================================================================*/
	   
     EXEC SQL 
     update  pkzmpmas  
        set  dedsum = nvl(anudamt,0)   + nvl(meddamt,0)   + nvl(longmtamt,0) + nvl(empamt,0)    +   /* longmtamt 추가 */
                      nvl(SaveAmt3,0)  + nvl(ticketamt,0) + nvl(sauamt,0)    + nvl(igamt,0)     +
                      nvl(dedamt0,0)   +                                                            /* 기타공제0 차량대여료추가 */
                      nvl(dedamt1,0)   + nvl(dedamt2,0)   + nvl(dedamt3,0)   + nvl(dedamt4,0)   +
                      nvl(dedamt5,0)   + nvl(dedamt6,0)   + nvl(dedamt7,0)   + nvl(dedamt8,0)   +
                      nvl(meddedamt,0) +                                                            /* 2015.01 jissi 의료비대출 공제항목 추가. 손필영M 한정미 요청*/
                      nvl(hsorgamt,0)  + nvl(hsintamt,0)  + 
                      nvl(sacorpcp,0)  + nvl(sacorpamt,0) + nvl(sabankcp,0)  + nvl(sabankamt,0) +   /* sacorpcp,sabankcp 추가 */
                      nvl(sangamt,0)   + nvl(nbamt,0)     + nvl(intax,0)     + nvl(jutax,0)
      where  empno >= :frempno and empno <= :toempno
        and  upper(nvl(payyn,'N')) = 'Y';
                               
     if (sqlca.sqlcode != 0) 
     {
         print_errmsg(sqlca.sqlcode,"월급여화일 쓰기오류9...");
         sprintf(log_buff, " 월급여화일 쓰기오류9..."); 
         Write_batlog(seqno++, log_buff);                
         error_quit("작업실패...");
     }
}
/***************************************************************************
  print_errmsg  Function.
****************************************************************************/
void   print_errmsg(int errcode, char *errmsg)
{
     printf("[ERRCODE : %d] %s\n", errcode,errmsg);
}

/*=== dsa2000 2004.11. Rexec대체 서비스를 위한 =====================================*/
int Write_batlog(int seqno, char *message)
{  
     EXEC SQL AT log_db 
     INSERT INTO PYBATLOG
     VALUES (:log_rundate, :log_progid, :seqno, :log_writeman, :message);

     if ((sqlca.sqlcode != 1403) && (sqlca.sqlcode != 0)) 
     {  
          printf("ERROR_CODE : %d, pybatlog Insert Error. \n", sqlca.sqlcode);    
          return(FAIL);
     }                        
                        
     EXEC SQL AT log_db COMMIT WORK ;  
}