/* ===================== Program Header ==========================================
 PROGRAM-NAME   : PKE1020G(상여금 생성/계산)
 SYSTEM-NAME    : 급여
 SUBSYSTEM-NAME : 일반상여금
 Programmer     : 이랑교
 Version        : 30.01
 Date           : 1999.02.04

Update Contents
   Version    date(yy.mm.dd) programmer       description     relevant doc.no
   1.00       1997.12.31       허철행           최초개발본      설계명세서
   2.00       1998.06.11       김승회           수정본         전산처리요청
   30.01     1999.02.04       이랑교    신인사관련 항목추가및 제도변경녀
   30.02     1999.06.28       이랑교    교육 파견자 총액의 70%만 지급
   30.03     2000.07.18       유효성    교육 파견자 복귀후 총액의 100% 지급
   31.00     2001.03.05       유효성    임원 연봉제에 따른 로직 수정
   31.01     2004.02.24      강륜종             Oracle8i 업그레이드에 의한 관련 라이브러리 업그레이드. 
   32.00     2004.11.        강륜종(dsa2000)    Rexec대체 서비스를 위한 수정적업.     
================================================================================ */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <time.h>
#include "hinsa_macro.h"
#include "hinsa_string.h"
#include "hinsa_date.h"
#include "hinsa_log.h"
#include "hinsa_oracle.h"
#include "hinsa_common.h"

#define  COL_HOME  5
#define  COL_END   60
#define  SU_TERM   3   /*수습기간 : 99.01.01 이후 입사자는 인턴기간 1개월이 
                         없으므로  수습기간은 3개월이다.    */
/* #define SU_TERM  2   수습기간 : 99.01.01 입사자는 인턴기간 1개월때문에 수습기간이 2개월
*/
/* ===========================================================================
  Function Prototype 정의 
   =========================================================================== */

void  calc_bonamt();
float  get_days(char *,char *);

/* ===========================================================================
  Global Variable
   =========================================================================== */

EXEC SQL BEGIN DECLARE SECTION;

  /* ----------------------------------------------------
   상여금 마스터 관련변수 
     ---------------------------------------------------- */

     char    empno[4+1]        = "";   /* 사번    */ 
     char    korname[12+1]     = "";   /* 성명    */ 
     char    empdate[8+1]      = "";   /* 입사일   */ 
     char    paynum[2+1]       = "";   /* 급여차수   */ 
     char    paycl[4]          = "";   /* 직급    */ 
     float   paygr             = 0;    /* 호봉    */ 
     char    orgnum[3+1]       = "";   /* 조직차수   */ 
     char    deptcode[6+1]     = "";   /* 부서코드   */ 
                               
     char    bonyn[1+1]        = "";   /* 상여금 지급여부  */ 
                                       /* <특이사항>   */ 
     char    spkind[3+1]       = "";   /* 특이구분(인사상태)  */ 
     char    spfrdate[8+1]     = "";   /* 특이기간 from  */ 
     char    sptodate[8+1]     = "";   /* 특이기간 to   */ 
     float   spdd              = 0;    /* 특이일   */ 
                               
     float   bonkidd           = 0;    /* 상여기준일수   */ 
     char    kifrdate[8+1]     = "";   /* 근속기준일From  */ 
     char    kitodate[8+1]     = "";   /* 근속기준일To   */ 
     float   bongivedd         = 0;    /* 상여지급일수   */  
     char    sufrdate[8+1]     = "";   /* 수습기간From   */ 
     char    sutodate[8+1]     = "";   /* 수습기간To   */ 
     float   sudd              = 0;    /* 수습일수   */ 
                          
     char    basicyn[1+1]      = "";   /* 기본급 포함여부  */ 
     char    infoyn[1+1]       = "";   /* 정보통신수당 포함여부*/ 
     char    dutyyn[1+1]       = "";   /* 직무수당 포함여부  */ 
     char    promyn[1+1]       = "";   /* 업무추진비 포함여부  */ 
     float   standamt          = 0;    /* 기준임금   */ 
                          
     float   kiamt             = 0;    /* 기준지급액   */ 
     float   kirate            = 0;    /* 기준지급율   */ 
     float   fixamt            = 0;    /* 정액지급액   */ 
     float   giveamt           = 0;    /* 총지급액   */ 
                         
     float   holdrate          = 0;    /* 유보율   */ 
     float   holdamt           = 0;    /* 유보액   */ 
     float   realamt           = 0;    /* 실지급액   */ 
        

  /* ----------------------------------------------------
   상여금 지급기준 
     ---------------------------------------------------- */

     char     bonkind[1+1]   = "";    /* 상여구분   */
     char     bonyymm[6+1]   = "";    /* 지급년월   */
     char     paytype[1+1]   = "";    /* 지급방식   */
                                      
     char     regyn[1+1]     = "";    /* 상여지급여부(정규)  */
     char     staffyn[1+1]   = "";    /* 상여지급여부(임원)  */
     char     tempyn[1+1]    = "";    /* 상여지급여부(임시)  */
                                      
     float    r_kirate       = 0;     /* 상여기준지급율(정규) */
     float    s_kirate       = 0;     /* 상여기준지급율(임원) */
     float    t_kirate       = 0;     /* 상여기준지급율(임시) */
                                      
     float    r_kiamt        = 0;     /* 상여정액지급액(정규) */
     float    s_kiamt        = 0;     /* 상여정액지급액(임원) */
     float    t_kiamt        = 0;     /* 상여정액지급액(임시) */
                                      
     char     r_kidate[8+1]  = "";    /* 지급기준근속일(정규) */
     char     s_kidate[8+1]  = "";    /* 지급기준근속일(임원) */
     char     t_kidate[8+1]  = "";    /* 지급기준근속일(임시) */
     char     datedesc[40+1] = "";    /* 지급기준근속일설명  */
                                     
     char     r_basic[1+1]   = "";    /* 기본급포함여부(정규) */
     char     s_basic[1+1]   = "";    /* 기본급포함여부(임원) */
     char     t_basic[1+1]   = "";    /* 기본급포함여부(임시) */
                                      
     char     r_info[1+1]    = "";    /* 정보수당포함여부-정규*/
     char     s_info[1+1]    = "";    /* 정보수당포함여부-임원*/
     char     t_info[1+1]    = "";    /* 정보수당포함여부-임시*/
                                
     char     r_duty[1+1]    = "";    /* 직무수당포함여부-정규*/
     char     s_duty[1+1]    = "";    /* 직무수당포함여부-임원*/
     char     t_duty[1+1]    = "";    /* 직무수당포함여부-임시*/
                                      
     char     r_prom[1+1]    = "";    /* 추진비포함여부-정규   */
     char     s_prom[1+1]    = "";    /* 추진비포함여부-임원  */
     char     t_prom[1+1]    = "";    /* 추진비포함여부-임시   */
                                     
     char     r_fixpay[1+1]  = "";    /* 월정연봉포함여부  */
                                      
     char     givekind[1+1]  = "";    /* 지급율 구분   */
     float    giverate       = 0;     /* 일괄지급율   */
                            
     char     holdkind[1+1]  = "";    /* 유보율 구분   */
     float    b_holdrate     = 0;     /* 일괄유보율   */
     float    b_holdamt      = 0;     /* 일괄유보액   */
                            
     char     b_kifrdate[8+1]  = "";  /* 근속기준일From  */
     char     b_kitodate[8+1]  = "";  /* 근속기준일To   */
     float    kidd             = 0;   /* 상여기준일수   */
                                                  
     char     fixmonthyn[1+1]  = "";  /* 정액제근속개월적용  */
     char     fixrateyn[1+1]   = "";  /* 정액제지급율적용  */

     char     anfrdate[8+1]    = "";  /* 발령일From   */
     char     antodate[8+1]    = "";  /* 발령일To    */
     char     exfrdate[8+1]    = "";  /* 근속제외From   */
     char     extodate[8+1]    = "";  /* 근속제외To    */
     varchar  exkind[3+1];

     char     jobempno[4+1]    = "";  /* 작업자사번   */                     
     
     float    t_term;
     char     t_frdate[8+1];
     char     t_todate[8+1];
     int      trainrate =0;

EXEC SQL END DECLARE SECTION;
EXEC SQL INCLUDE SQLCA;


char  msg[300+1]    = "";
int   id;
char  delkind[1+1]  = "";

/*=== dsa2000 2004.11. Rexec대체 서비스를 위한 =============*/
char  log_rundate[16]     = ""; 
char  log_progid[16]      = "";
char  log_writeman[5]     = "";
char  log_buff[100]       = "";
int   seqno = 0; 


void main(int argc, char *argv[])
{
     char FL_file[255];
     
     if  (argc != 7) {  /* /hper8/HINSA/proc/bin/Kbin/pke1020g 200406 7 1 D006 pke1020g 2004110500000 */
          printf("[Usage] : pke1020g 1.지급년월  2.상여구분  3.삭제유형(1,2) 4.작업자 5.프로그램ID 6.시작시간 \n");
          exit(1);
     }  
     
     /*로그 디렉토리 생성 및 로그작업 */
     STRINIT(FL_file);
     strcpy(FL_file,"pke1020g");
     
     hinsa_get_filename(1, FL_file);
     if  (hinsa_log_open(FL_file) == FAILURE)
     {
          hinsa_exit(0,"로그파일 생성에러로 인한 프로그램 종료...");
          return;
     }
     
     sprintf(bonyymm,"%s",  argv[1]);
     sprintf(bonkind,"%s",  argv[2]);
     sprintf(delkind,"%s",  argv[3]);
     sprintf(jobempno,"%s",  argv[4]);  
     
     /* Dsa2000  2004.02.24.  **********************************/
     hinsa_log_print(0,"상여금 생성/계산 프로그램 시작...");
     hinsa_db_connect();  /*DB Connect 실시..*/
     /*dsa2000  수정..End......................................*/   
     
     /*=== dsa2000 2004.11. Rexec대체 서비스를 위한 =============*/
     strcpy(log_writeman, argv[4]);
     strcpy(log_progid,   argv[5]);
     strcpy(log_rundate,  argv[6]);  
      
     EXEC SQL DECLARE log_db DATABASE;    
     hinsa_log_db_connect();
     /*========================================================*/
     
     calc_bonamt();
     
     /* Dsa2000  2004.02.25.  hinsa_exit()에서 DB Commit & DB접속종료함.*/
     if  (sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
     {
          sprintf(log_buff, "ERROR ====== [작업 실패] ====="); /*dsa2000 Rexec 대체*/
          Write_batlog(seqno++, log_buff);                    /*dsa2000 Rexec 대체*/
          error_quit("ERROR [작업 실패]\n");
     }
     else
     {
          sprintf(log_buff, "OK ======[상여금 추출/계산작업 완료]====="); /*dsa2000 Rexec 대체*/
          Write_batlog(seqno++, log_buff);                  /*dsa2000 Rexec 대체*/
          hinsa_exit(0,"OK [상여금 추출/계산작업 완료].\n");   
     }              
              
}

void calc_bonamt()
{
     /* 기존자료삭제 */
     if  (delkind[0] == '1')
     {
          EXEC SQL
          delete from pkmgbmas
           where  bonyymm = :bonyymm
             and  bonkind  = :bonkind;
          if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
          {
               print_errmsg(sqlca.sqlcode,"0. 기존자료삭제1");
               sprintf(log_buff, "기존자료삭제1 Error\n"); /*dsa2000 Rexec 대체*/
               Write_batlog(seqno++, log_buff);
               error_quit("작업실패...");
          }  
     }  
     else if (delkind[0] == '2')
     {    
          EXEC SQL
          delete from pkmgbmas
          where  bonyymm <> :bonyymm;
          if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
          {
               print_errmsg(sqlca.sqlcode,"0. 기존자료삭제2");
               sprintf(log_buff, "기존자료삭제2 Error\n"); /*dsa2000 Rexec 대체*/
               Write_batlog(seqno++, log_buff);
               error_quit("작업실패...");
          }
     }
     
     /* 1. 상여지급기준읽기   */
     EXEC SQL
     select  paytype, upper(regyn), upper(staffyn), upper(tempyn),
             r_kirate, s_kirate, t_kirate, r_kiamt, s_kiamt,
             t_kiamt, r_kidate, s_kidate, t_kidate, datedesc,
             upper(r_basic), upper(s_basic), upper(t_basic),
             upper(r_info), upper(s_info), upper(t_info),
             upper(r_duty), upper(s_duty), upper(t_duty),
             upper(r_prom), upper(s_prom), upper(t_prom),
             givekind, giverate, holdkind, holdrate,
             holdamt, kifrdate, kitodate, kidd,
             fixmonthyn, fixrateyn, r_fixpay
       into  :paytype, :regyn, :staffyn, :tempyn, 
             :r_kirate, :s_kirate, :t_kirate, :r_kiamt, :s_kiamt, 
             :t_kiamt, :r_kidate, :s_kidate, :t_kidate, :datedesc,
             :r_basic, :s_basic, :t_basic, 
             :r_info, :s_info, :t_info,
             :r_duty, :s_duty, :t_duty,
             :r_prom, :s_prom, :t_prom,
             :givekind, :giverate, :holdkind, :b_holdrate, 
             :b_holdamt, :b_kifrdate, :b_kitodate, :kidd,
             :fixmonthyn, :fixrateyn, :r_fixpay
       from  pkcgbbas
      where  bonyymm = :bonyymm
        and  bonkind  = :bonkind;
     
     if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != -1405))
     {
          print_errmsg(sqlca.sqlcode,"1. 상여지급기준읽기");
          sprintf(log_buff, "1. 상여지급기준읽기"); /*dsa2000 Rexec 대체*/
          Write_batlog(seqno++, log_buff);
          error_quit("작업실패...");
     }
     
     /* 2.1 상여금 대상자 추출 */
     EXEC SQL
     insert  into pkmgbmas (
             empno,     korname, empdate, paynum,    paycl, paygr, orgnum, deptcode,
             bonkind,   bonyymm, bonyn,   writetime, writeman)
     select  empno,     korname, empdate, paynum,    paycl, paygr, orgnum, deptcode,
             :bonkind, :bonyymm, 'Y',     to_char(sysdate,'YYYYMMDDHH24MISS'), :jobempno
       from  pkmpmas
      where  upper(payyn) = 'Y'
        and  empno not like 'Y%'  /*일반직 급여통합에 따른 대상자에서 Y사번 제외  2008.01.*/
        and  empno not like 'Q%'  /* 분기연봉 대상자에서 Q사번 제외 2008.08.20 (김태호)*/
        and  empno not like 'J%'  /* 분기연봉 대상자에서 J사번 제외 2008.12.21 (김태호)*/
        and  empno not like 'P%'; /* 분기연봉 대상자에서 P사번 제외 2008.12.21 (김태호)*/
       
     if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
     {
          print_errmsg(sqlca.sqlcode,"2.1 상여금 대상자 추출");
          sprintf(log_buff, "2.1 상여금 대상자 추출"); /*dsa2000 Rexec 대체*/
          Write_batlog(seqno++, log_buff);
          error_quit("작업실패...");
     }
     
     /* 2.2  지급여부 <> 'Y'인 자료삭제 */
     if  (strcmp(regyn,"Y") != 0)
     {
          EXEC SQL
          delete  from pkmgbmas
          where  bonyymm = :bonyymm
          and  bonkind  = :bonkind ;
/* =================================== ==========================================
  31.00  2001.03.05  유효성   임원 연봉제에 따른 수정
================================================================================ */   
/*   and  ((paycl between '09' and '93') or (paycl ='E1')
     or       (empno like 'P%'))  ;   
*/
          if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
          {
               print_errmsg(sqlca.sqlcode,"지급여부 <> 'Y'인 자료삭제");
               sprintf(log_buff, "지급여부 <> 'Y'인 자료삭제"); /*dsa2000 Rexec 대체*/
               Write_batlog(seqno++, log_buff);
               error_quit("작업실패...");
          }
     }
   
/* =================================== ==========================================
  31.00  2001.03.05  유효성   임원 연봉제에 따른 수정
================================================================================ */   
/* 주석처리 start
  if (strcmp(staffyn,"Y") != 0)
  {
   EXEC SQL
   delete  from pkmgbmas
   where  bonyymm = :bonyymm
   and  bonkind  = :bonkind
   and  (paycl between '01' and '08');
   if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
   {
     print_errmsg(sqlca.sqlcode,"지급여부 <> 'Y'인 자료삭제");
     error_quit("작업실패...");
   }
  }
*/  
/*
  if (strcmp(tempyn,"Y") != 0)
  {
   EXEC SQL
   delete  from pkmgbmas
   where  bonyymm = :bonyymm
   and  bonkind  = :bonkind
   and  paycl like 'A%';
   if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
   {
     print_errmsg(sqlca.sqlcode,"지급여부 <> 'Y'인 자료삭제");
     error_quit("작업실패...");
   }
  }
주석처리 end */  
  
  /* 3.1 kifrdate, kitodate, bonkidd, bongivedd 설정 */

  /* 3.1.1 kifrdate 설정 */
     EXEC SQL
     update  pkmgbmas
        set  kifrdate = empdate
      where  bonyymm = :bonyymm
        and  bonkind  = :bonkind
        and  empdate > :b_kifrdate;
     if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
     {
          print_errmsg(sqlca.sqlcode,"3.1.1 kifrdate 설정");
          sprintf(log_buff, "3.1.1 kifrdate 설정"); /*dsa2000 Rexec 대체*/
          Write_batlog(seqno++, log_buff);
          error_quit("작업실패...");
     }
     
     EXEC SQL
     update  pkmgbmas
        set  kifrdate = :b_kifrdate
      where  bonyymm = :bonyymm
        and  bonkind  = :bonkind
        and  empdate <= :b_kifrdate;
     if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
     {
          print_errmsg(sqlca.sqlcode,"3.1.1 kifrdate 설정...");
          sprintf(log_buff, "3.1.1 kifrdate 설정..."); /*dsa2000 Rexec 대체*/
          Write_batlog(seqno++, log_buff);
          error_quit("작업실패...");
     }
     
     /* 3.1.2 kitodate 설정 */
     EXEC SQL
     update  pkmgbmas
        set  kitodate = :b_kitodate
      where  bonyymm = :bonyymm
        and  bonkind  = :bonkind;
     
     if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
     {
          print_errmsg(sqlca.sqlcode,"3.1.2 kitodate 설정");
          sprintf(log_buff, "3.1.2 kitodate 설정"); /*dsa2000 Rexec 대체*/
          Write_batlog(seqno++, log_buff);
          error_quit("작업실패...");
     }
   
     /* 3.1.3 bonkidd 설정 */
     EXEC SQL
     update  pkmgbmas
        set  bonkidd  = :kidd,
             bongivedd= (to_date(kitodate,'YYYYMMDD')-to_date(kifrdate,'YYYYMMDD')+1)
      where  bonyymm = :bonyymm
        and  bonkind  = :bonkind
        and  length(replace(kitodate,' ','')) = 8 ; /* 정액이 아닐때만*/
     
     if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
     {
          print_errmsg(sqlca.sqlcode,"3.1.3 bonkidd 설정");
          sprintf(log_buff, "3.1.3 bonkidd 설정"); /*dsa2000 Rexec 대체*/
          Write_batlog(seqno++, log_buff);
          error_quit("작업실패...");
     }
   
     /* 3.2 sufrdate, sutodate, sudd 설정 */
   
     EXEC SQL DECLARE c1 CURSOR FOR
     select  a.empno, a.korname, anfrdate, b.kifrdate,
             to_char(add_months(to_date(anfrdate,'YYYYMMDD'),3) - 1,'YYYYMMDD') antodate,
             c.kitodate
       from  pihanno a, pkmgbmas b, pkcgbbas c
      where  c.bonyymm = :bonyymm
        and  c.bonkind = :bonkind
        and  b.bonyymm = :bonyymm
        and  b.bonkind = :bonkind
        and  b.empno   = a.empno
        and  ancode   = '111'
   /*infra   and  (a.payra = '78' and bpayra is null) */
        and  (a.payra = 'D51' and bpayra is null)
   /*  and  (a.payra = '590' and bpayra is null)  */
        and  (anfrdate > to_char(add_months(to_date(c.kifrdate,'YYYYMMDD'),-1*3),'YYYYMMDD')
   /*                 > to_char(add_months(to_date(c.kifrdate,'yyyymmdd'),-3),'yyyymmdd') */
        and  anfrdate <= c.kitodate)
      order  by anfrdate, a.empno;
   
     EXEC SQL OPEN c1;
     if ((sqlca.sqlcode != 1403) && (sqlca.sqlcode != 0) && (sqlca.sqlcode != -1405)) 
     {
          print_errmsg(sqlca.sqlcode,"Cursor c1 Open Error...");
          sprintf(log_buff, "Cursor c1 Open Error..."); /*dsa2000 Rexec 대체*/
          Write_batlog(seqno++, log_buff);
          EXEC SQL CLOSE c1;
          error_quit("작업실패...");
     }
     
     while(1)
     {
          EXEC SQL FETCH   c1 INTO   
          :empno, :korname, :anfrdate, :kifrdate, :antodate, :kitodate;
          if  (sqlca.sqlcode == 1403) 
          {
               EXEC SQL CLOSE c1;
               break;
          }
          
          if  (sqlca.sqlcode != 0) 
          {
               print_errmsg(sqlca.sqlcode,"Cursor c1 Data Fetch Error...");
               sprintf(log_buff, "Cursor c1 Data Fetch Error..."); /*dsa2000 Rexec 대체*/
               Write_batlog(seqno++, log_buff);
               EXEC SQL CLOSE c1;
               error_quit("작업실패...");
          }
          
          /* 3.2.1 sufrdate 설정 */
          if  (strcmp(anfrdate,kifrdate) > 0)
          {
               EXEC SQL
               update  pkmgbmas
               set  sufrdate = :anfrdate
               where  bonyymm = :bonyymm
               and  bonkind  = :bonkind
               and  empno  = :empno;
               if  (sqlca.sqlcode != 0) 
               {
                    print_errmsg(sqlca.sqlcode,"3.2.1 sufrdate 설정");
                    error_quit("작업실패...");
               }
          }
          else
          {
               EXEC SQL
               update  pkmgbmas
                  set  sufrdate = :kifrdate
                where  bonyymm  = :bonyymm
                  and  bonkind  = :bonkind
                  and  empno    = :empno;
               if  (sqlca.sqlcode != 0) 
               {
                    print_errmsg(sqlca.sqlcode,"3.2.1 sufrdate 설정");
                    error_quit("작업실패...");
               }
          }
          
          /* 3.2.2 sutodate 설정 */
          if  (strcmp(antodate,kitodate) < 0)
          {
               EXEC SQL
               update  pkmgbmas
               set  sutodate = :antodate
               where  bonyymm = :bonyymm
               and  bonkind  = :bonkind
               and  empno  = :empno;
               if  (sqlca.sqlcode != 0) 
               {
                    print_errmsg(sqlca.sqlcode,"3.2.2 sutodate 설정");
                    sprintf(log_buff, "3.2.2 sutodate 설정"); /*dsa2000 Rexec 대체*/
                    Write_batlog(seqno++, log_buff);
                    error_quit("작업실패...");
               }
          }
          else
          {
               EXEC SQL
               update  pkmgbmas
                  set  sutodate = :kitodate
                where  bonyymm = :bonyymm
                  and  bonkind  = :bonkind
                  and  empno  = :empno;
               if  (sqlca.sqlcode != 0) 
               {
                    print_errmsg(sqlca.sqlcode,"3.2.2 sutodate 설정");
                    error_quit("작업실패...");
               }
          }
          
          /* 3.2.3 sudd 설정 */
          EXEC SQL
          update  pkmgbmas
             set  sudd     =   to_date(sutodate,'YYYYMMDD')-to_date(sufrdate,'YYYYMMDD')+1
           where  bonyymm  = :bonyymm
             and  bonkind  = :bonkind
             and  empno    = :empno;
          if  (sqlca.sqlcode != 0) 
          {
               print_errmsg(sqlca.sqlcode,"3.2.3 sudd 설정");
               sprintf(log_buff, "3.2.3 sudd 설정"); /*dsa2000 Rexec 대체*/
               Write_batlog(seqno++, log_buff);
               error_quit("작업실패...");
          }
          
          /* 3.2.4 상여대상기간 보정 */
          EXEC SQL
          update  pkmgbmas
             set  kifrdate  = null,
                  kitodate  = null,
                  bongivedd = 0
           where  bonyymm = :bonyymm
             and  bonkind  = :bonkind
             and  empno  = :empno
             and  ((to_date(sutodate,'YYYYMMDD')+1) >= to_date(:kitodate,'YYYYMMDD'));
          if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
          {
               print_errmsg(sqlca.sqlcode,"3.2.4 상여대상기간 보정");
               sprintf(log_buff, "3.2.4 상여대상기간 보정"); /*dsa2000 Rexec 대체*/
               Write_batlog(seqno++, log_buff);
               error_quit("작업실패...");
          }
          
          EXEC SQL
          update  pkmgbmas
             set  kifrdate  = to_char(to_date(sutodate,'YYYYMMDD')+1,'yyyymmdd'),
                  bongivedd = (to_date(:kitodate,'YYYYMMDD')-(to_date(sutodate,'YYYYMMDD')+1) +1)
           where  bonyymm  = :bonyymm
             and  bonkind  = :bonkind
             and  empno    = :empno
             and  ((to_date(sutodate,'YYYYMMDD')+1) < to_date(:kitodate,'YYYYMMDD'));
          if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
          {
               print_errmsg(sqlca.sqlcode,"3.2.4 상여대상기간 보정");
               error_quit("작업실패...");
          }
     }
     
     /* 3.3 spkind, spfrdate, sptodate, spdd 설정 */
     /* 3.3.1 근속제외1 - 수습기간이 없는 경우 */
     EXEC SQL DECLARE c2 CURSOR FOR
     select  a.empno, a.korname, exkind, exfrdate, b.kifrdate, extodate, 
             b.kitodate
     from  pkhexdd a, pkmgbmas b
     where  bonyymm  = :bonyymm
       and  bonkind  = :bonkind
       and  a.empno  = b.empno
       and  (kifrdate is not null and kitodate is not null)
       and  ((exfrdate >= kifrdate and exfrdate < kitodate) or
            (extodate >= kifrdate and extodate < kitodate) or
            (exfrdate <= kifrdate and extodate >= kitodate))
       and  upper(exfixyn) = 'Y'
     order  by a.empno, a.exfrdate;
   
     EXEC SQL OPEN c2;
     if ((sqlca.sqlcode != 1403) && (sqlca.sqlcode != 0) &&
         (sqlca.sqlcode != -1405)) 
     {
          print_errmsg(sqlca.sqlcode,"Cursor c2 Open Error...");
          sprintf(log_buff, "Cursor c2 Open Error..."); /*dsa2000 Rexec 대체*/
          Write_batlog(seqno++, log_buff);
          EXEC SQL CLOSE c2;
          error_quit("작업실패...");
     }
     
     while(1)
     {
          EXEC SQL FETCH   c2 INTO   
          :empno, :korname, :exkind, :exfrdate, :kifrdate, 
          :extodate, :kitodate;
          if  (sqlca.sqlcode == 1403) 
          {
               EXEC SQL CLOSE c2;
               break;
          }
          
          if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != -1405))
          {
               print_errmsg(sqlca.sqlcode,"Cursor c2 Data Fetch Error...");
               sprintf(log_buff, "Cursor c2 Data Fetch Error...."); /*dsa2000 Rexec 대체*/
               Write_batlog(seqno++, log_buff);
               EXEC SQL CLOSE c2;
               error_quit("작업실패...");
          }
          
          if  (strcmp(kifrdate,exfrdate) >= 0)
               sprintf(t_frdate,"%s",kifrdate);
          else
               sprintf(t_frdate,"%s",exfrdate);
          
          if  (strcmp(kitodate,extodate) <= 0)
               sprintf(t_todate,"%s",kitodate);
          else
               sprintf(t_todate,"%s",extodate);
          t_term = get_days(t_frdate,t_todate);
          
          EXEC SQL
          update  pkmgbmas
             set  bongivedd  = bongivedd - :t_term,
                  spkind     = :exkind,
                  spfrdate   = :t_frdate,
                  sptodate   = :t_todate,
                  spdd       = spdd + :t_term        
           where  bonyymm  = :bonyymm
             and  bonkind  = :bonkind
             and  empno    = :empno;
          if  (sqlca.sqlcode != 0) 
          {
               print_errmsg(sqlca.sqlcode,"3.3.1 근속제외1");
               sprintf(log_buff, "3.3.1 근속제외1"); /*dsa2000 Rexec 대체*/
               Write_batlog(seqno++, log_buff);
               error_quit("작업실패...");
          }
     }
   
     /* 3.3.2 근속제외2 - 수습기간이 있는 경우 */
     EXEC SQL DECLARE c3 CURSOR FOR
     select  a.empno, a.korname, exkind, exfrdate, b.sufrdate, 
             extodate, b.sutodate
       from  pkhexdd a, pkmgbmas b
      where  bonyymm = :bonyymm
        and  bonkind = :bonkind
        and  a.empno  = b.empno
        and  (sufrdate is not null and sutodate is not null)
        and  ((exfrdate >= sufrdate and exfrdate < sutodate) or
             (extodate >= sufrdate and extodate < sutodate) or
             (exfrdate <= sufrdate and extodate >= sutodate))
        and  upper(exfixyn) = 'Y'
      order  by a.empno, a.exfrdate;
   
     EXEC SQL OPEN c3;
     if ((sqlca.sqlcode != 1403) && (sqlca.sqlcode != 0) && (sqlca.sqlcode != -1405)) 
     {
          print_errmsg(sqlca.sqlcode,"Cursor c3 Open Error...");
          sprintf(log_buff, "Cursor c3 Open Error..."); /*dsa2000 Rexec 대체*/
          Write_batlog(seqno++, log_buff);
          EXEC SQL CLOSE c3;
          error_quit("작업실패...");
     }
     
     while(1)
     {
          EXEC SQL FETCH   c3 INTO   
          :empno, :korname, :exkind, :exfrdate, :sufrdate, 
          :extodate, :sutodate;
          if  (sqlca.sqlcode == 1403) 
          {
               EXEC SQL CLOSE c3;
               break;
          }
          
          if  (sqlca.sqlcode != 0) 
          {
               print_errmsg(sqlca.sqlcode,"Cursor c3 Data Fetch Error...");
               sprintf(log_buff, "Cursor c3 Data Fetch  Error..."); /*dsa2000 Rexec 대체*/
               Write_batlog(seqno++, log_buff);
               EXEC SQL CLOSE c3;
               error_quit("작업실패...");
          }
          
          if  (strcmp(sufrdate,exfrdate) >= 0)
               sprintf(t_frdate,"%s",sufrdate);
          else
               sprintf(t_frdate,"%s",exfrdate);
          
          if  (strcmp(sutodate,extodate) <= 0)
               sprintf(t_todate,"%s",sutodate);
          else
               sprintf(t_todate,"%s",extodate);
          t_term = get_days(t_frdate,t_todate);
          
          EXEC SQL
          update  pkmgbmas
             set  sudd  = sudd - :t_term,
                  spdd  = spdd + :t_term        
           where  bonyymm = :bonyymm
             and  bonkind  = :bonkind
             and  empno  = :empno;
          if  (sqlca.sqlcode != 0) 
          {
               print_errmsg(sqlca.sqlcode,"3.3.2 근속제외2");
               sprintf(log_buff, "3.3.2 근속제외2."); /*dsa2000 Rexec 대체*/
               Write_batlog(seqno++, log_buff);
               error_quit("작업실패...");
          }
          
          EXEC SQL
          update  pkmgbmas
             set  spkind   = :exkind,
                  spfrdate = :t_frdate,
                  sptodate = :t_todate        
           where  bonyymm   = :bonyymm
             and  bonkind   = :bonkind
             and  empno     = :empno
             and  :exfrdate > nvl(spfrdate,' ');
          if  (sqlca.sqlcode != 0) 
          {
               print_errmsg(sqlca.sqlcode,"3.3.2 근속제외2");
               sprintf(log_buff, "3.3.2 근속제외2."); /*dsa2000 Rexec 대체*/
               Write_batlog(seqno++, log_buff);
               error_quit("작업실패...");
          }
     }
     
     /* 3.4 기준임금(standamt) 설정 */
     EXEC SQL
     update  pkmgbmas
        set  
             kirate  = :r_kirate,
             fixamt  = :r_kiamt   
      where  bonyymm  = :bonyymm
        and   bonkind  = :bonkind ;
   /* ==============================================================================
     31.00  2001.03.05  유효성   임원 연봉제에 따른 수정
   ================================================================================ */     
   /*  and  ((paycl between '09' and '93') or (paycl = 'E1'));
   */
           
     if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
     {
          print_errmsg(sqlca.sqlcode,"3.4 기준임금(standamt) 설정1");
          sprintf(log_buff, "3.4 기준임금(standamt) 설정1"); /*dsa2000 Rexec 대체*/
          Write_batlog(seqno++, log_buff);
          error_quit("작업실패...");
     }
   
   /* ==============================================================================
     31.00  2001.03.05  유효성   임원 연봉제에 따른 주석처리
   ================================================================================ */     
   /*주석처리 start
   
     EXEC SQL
     update  pkmgbmas
     set  basicyn = :s_basic,
      infoyn  = :s_info,
      dutyyn  = :s_duty,
      promyn  = :s_prom,
      kirate  = :s_kirate,
      fixamt  = :s_kiamt   
     where  bonyymm = :bonyymm
     and  bonkind  = :bonkind
     and  (paycl between '01' and '08');
           
     if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
     {
      print_errmsg(sqlca.sqlcode,"3.4 기준임금(standamt) 설정2");
      error_quit("작업실패...");
     }
   */  
   /*
     EXEC SQL
     update  pkmgbmas
     set  basicyn = :t_basic,
      infoyn  = :t_info,
      dutyyn  = :t_duty,
      promyn  = :t_prom,
      kirate  = :t_kirate,
      fixamt  = :t_kiamt   
     where  bonyymm = :bonyymm
     and  bonkind  = :bonkind
     and  paycl   like 'A%';
     if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
     {
      print_errmsg(sqlca.sqlcode,"3.4 기준임금(standamt) 설정3");
      error_quit("작업실패...");
     }
   */  
   /*
     EXEC SQL
     update  pkmgbmas a
     set  standamt = 
        ( 
        select  decode(basicyn,'Y',basicamt,0)  +
         decode(infoyn,'Y',infoamt,0)  +
         decode(dutyyn,'Y',dutyamt,0)  +
         decode(promyn,'Y',promamt,0)
        from  pkmpmas b
        where  a.empno = b.empno
        )
     where  bonyymm = :bonyymm
     and  bonkind  = :bonkind
     and  (paycl between '01' and '08');
   
     if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
     {
      print_errmsg(sqlca.sqlcode,"3.4 기준임금(standamt) 설정4-1");
      error_quit("작업실패...");
     }
   주석처리 end */  
   
     if  (r_fixpay[0] == 'Y')
     {
          EXEC SQL
          update  pkmgbmas a
             set  standamt = 
                           ( select  ceil(totpay/c.yearpaydiv)
                               from  pkhyphis b, pkcpbas c
                              where  b.empno = a.empno
                                and  b.yearpaynum = to_char(c.yearpaynum)
                           )
           where  bonyymm  = :bonyymm
             and  bonkind  = :bonkind
          /*  and  (paycl between '09' and '93')  */
   /* =================================== ==========================================
     31.00  2001.03.05  유효성   임원 연봉제에 따른 수정
   ================================================================================ */          
                  /*
                  and  ((paycl between '09' and '93') or (paycl = 'E1'))
                  */
             and  empno in 
                          (select empno 
                            from  pkhyphis
                           where  yearpaynum = (select to_char(yearpaynum) from pkcpbas)); 
         
          if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
          {
               print_errmsg(sqlca.sqlcode,"3.4 기준임금(standamt) 설정4-2");
               sprintf(log_buff, "3.4 기준임금(standamt) 설정4-2"); /*dsa2000 Rexec 대체*/
               Write_batlog(seqno++, log_buff);
               error_quit("작업실패...");
          }
     }
     
     if ((strcmp(paytype,"1") == 0) || (strcmp(paytype,"3") == 0))
     {    
          
          EXEC SQL
          update  pkmgbmas a
             set  kiamt = ceil(standamt * kirate / 100)
           where  bonyymm = :bonyymm
             and  bonkind  = :bonkind;
          if  (sqlca.sqlcode != 0) 
          {
               print_errmsg(sqlca.sqlcode,"3.4 기준임금(standamt) 설정5-1");
               sprintf(log_buff, "3.4 기준임금(standamt) 설정5-1"); /*dsa2000 Rexec 대체*/
               Write_batlog(seqno++, log_buff);
               error_quit("작업실패...");
          }
     }
     else
     {
          EXEC SQL
          UPDATE  PKMGBMAS A
             set  kiamt = 0
           where  bonyymm  = :bonyymm
             and  bonkind  = :bonkind;
          if  (sqlca.sqlcode != 0) 
          {
               print_errmsg(sqlca.sqlcode,"3.4 기준임금(standamt) 설정5-2");
               sprintf(log_buff, "3.4 기준임금(standamt) 설정5-2"); /*dsa2000 Rexec 대체*/
               Write_batlog(seqno++, log_buff);
               error_quit("작업실패...");
          }
     }
   
     if ((strcmp(paytype,"2") == 0) || (strcmp(paytype,"3") == 0))
     {
      
          if  (strcmp(fixrateyn,"Y") == 0)
          {
               /* ============================= 정액일경우 일할안함
               EXEC SQL
               update  pkmgbmas
               set  fixamt   = ceil(fixamt * ((bongivedd+sudd)/bonkidd))
               where  bonyymm = :bonyymm
               and  bonkind  = :bonkind;
               
               if (sqlca.sqlcode != 0) {
                print_errmsg(sqlca.sqlcode,"3.4 기준임금(standamt) 설정6-1");
                error_quit("작업실패...");
               }
               * ============================= */
          }
     }
     else
     {
           EXEC SQL
           update  pkmgbmas
              set  fixamt = 0
            where  bonyymm = :bonyymm
              and  bonkind  = :bonkind;
           
           if  (sqlca.sqlcode != 0) 
           {
                print_errmsg(sqlca.sqlcode,"3.4 기준임금(standamt) 설정6-2");
                sprintf(log_buff, "3.4 기준임금(standamt) 설정6-2"); /*dsa2000 Rexec 대체*/
                Write_batlog(seqno++, log_buff);
                error_quit("작업실패...");
           }
     }
     
     /* 3.5.1 총지급액(giveamt) 설정 */
     EXEC SQL
     update  pkmgbmas
        set  giveamt = ceil(kiamt * ((nvl(bongivedd,0)/decode(bonkidd,null,1,0,1,bonkidd))+ 
             decode(nvl(sudd,0),0,1,0.8)*(sudd/decode(bonkidd,null,1,0,1,bonkidd))))
      where  bonyymm  = :bonyymm
        and  bonkind  = :bonkind;
     
     if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
     {
          print_errmsg(sqlca.sqlcode,"3.5.1 총지급액(giveamt) 설정");
          sprintf(log_buff, "3.5.1 총지급액(giveamt) 설정"); /*dsa2000 Rexec 대체*/
          Write_batlog(seqno++, log_buff);
          error_quit("작업실패...");
     }  
     
     /* 3.5.2 정액일 경우  */
     EXEC SQL
     update  pkmgbmas
        set  giveamt = giveamt + fixamt 
      where  bonyymm = :bonyymm
        and  bonkind  = :bonkind;
     
     if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
     {
          print_errmsg(sqlca.sqlcode,"3.5.2 총지급액(giveamt) 설정");
          sprintf(log_buff, "3.5.2 총지급액(giveamt) 설정"); /*dsa2000 Rexec 대체*/
          Write_batlog(seqno++, log_buff);
          error_quit("작업실패...");
     }  
     
     /* ======================================================
          30.02  1999.06.28  이랑교  교육 파견자 총액의 70%만 지급
              3.5.2 총지급액(giveamt) 설정 =교육파견자 전액의 70%만 지급
              일할반영 안되어 있슴
   
     update  pkmgbmas
     set  giveamt = ceil( giveamt * 70 / 100 )
     where  bonyymm = '199906'
     and  bonkind  = '7'
           AND   PAYCL  > '08'
           AND   EMPNO IN ( SELECT EMPNO FROM PIMPMAS
                       WHERE (PSTATE = '32' OR EDUGUBUN ='4B'
                              OR LSEKIND ='25'))  ;
   
              ====================================================== */
   /* kth 주석 교육파견 100% 로 변경 2009.03.23 쿼리 전부 주석처리 필요 없어 주석처리  
   
   EXEC SQL
     update  pkmgbmas
     set  giveamt = ceil( giveamt * 100 / 100 ) 
     where  bonyymm = :bonyymm
     and  bonkind  = :bonkind     */
   /*infra        AND   PAYCL  > '08' */
           /*AND   PAYCL  >= 'C11' 
           AND   EMPNO IN ( SELECT EMPNO FROM PIMPMAS  */
     /*======Ver 30.03 (2000.7.18.) 교육복귀후는 100% 지급 ====================
                       WHERE (PSTATE = '32' OR EDUGUBUN ='4B'
                              OR LSEKIND ='25'))  ;  
     ====================================================================*/
                       /*WHERE (PSTATE = '32' OR (EDUGUBUN ='4B' AND nvl(EDUTODATE, '9') >= :bonyymm||'01')
                              OR (LSEKIND ='25' AND nvl(LSETODATE, '9') >= :bonyymm||'01') ))  ;
      
      
     if ((sqlca.sqlcode != 0)&&(sqlca.sqlcode != 1403)) {
      print_errmsg(sqlca.sqlcode,"3.5.2 총지급액(giveamt) 설정=교육파견자 전액의 100% ");
      sprintf(log_buff, "3.5.2 총지급액(giveamt) 설정");*/ /*dsa2000 Rexec 대체*/
      /*Write_batlog(seqno++, log_buff);
      error_quit("작업실패...");
     }*/
   
   /*  2009.03.23  김태호 수습은 80%로 지급으로 변경 함 
     EXEC SQL
     select trainrate      //수습 지급율 
       into :trainrate
       from pkcpbas;
     
     if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != 1403))
     {
          print_errmsg(sqlca.sqlcode,"3.4 기준임금(standamt) 설정4-2");
          sprintf(log_buff, "3.4 기준임금(standamt) 설정4-2"); 
          Write_batlog(seqno++, log_buff);
          error_quit("작업실패...");
     }
     
   
     EXEC SQL
     update  pkmgbmas
        set  giveamt  =  ceil( giveamt * :trainrate / 100 )  수습사원  전액 * 80% 변경 2009.03.23  
      where  bonyymm  =  :bonyymm
        and  bonkind  =  :bonkind
        and  paycl    >= 'C11'                                                          
        and  empno in (select empno from pkmpmas where payyn ='Y' and payra = 'D51');
      
      
     if ((sqlca.sqlcode != 0)&&(sqlca.sqlcode != 1403)) 
     {
          print_errmsg(sqlca.sqlcode,"3.5.2 총지급액(giveamt)설정 = 수습사원 전액 * 80% ");
          sprintf(log_buff, "3.5.2 총지급액(giveamt) 설정");
          Write_batlog(seqno++, log_buff);
          error_quit("작업실패...");
     } */
   /*  2009.03.23  김태호 수습은 80%로 지급으로 변경 함  끝*/
   
     /* 3.6 유보액 설정 */
   
     /* 3.6.1 유보율 설정 */
     switch(holdkind[0])  
     {
          case '1' :  /* 일괄유보율 */
          {
               EXEC SQL
               update  pkmgbmas
                  set  holdrate = :b_holdrate
                where  bonyymm  = :bonyymm
                  and  bonkind  = :bonkind;
               
               if  (sqlca.sqlcode != 0) 
               {
                    print_errmsg(sqlca.sqlcode,"3.6.1 유보율 설정1");
                    sprintf(log_buff, "3.6.1 유보율 설정1"); /*dsa2000 Rexec 대체*/
                    Write_batlog(seqno++, log_buff);
                    error_quit("작업실패...");
               }
               break;
          }
          case '2' :  /* 직급별 유보율 */
          {
               EXEC SQL
               update  pkmgbmas a
                  set  holdrate = 
                               (
                                select  nvl(b.holdrate,0)
                                  from  pkcgbhol b
                                 where  :holdkind = b.holdkind
                                   and  a.bonkind  = b.bonkind
                                   and  (a.paycl >= payclfr and a.paycl < payclto)
                               )
                where  bonyymm = :bonyymm
                  and  bonkind  = :bonkind
                  and  (bonkind, :holdkind) in (select  bonkind, holdkind
                                                  from  pkcgbhol);
                 
               if  (sqlca.sqlcode != 0) 
               {
                    print_errmsg(sqlca.sqlcode,"3.6.1 유보율 설정2");
                    sprintf(log_buff, "3.6.1 유보율 설정2"); /*dsa2000 Rexec 대체*/
                    Write_batlog(seqno++, log_buff);
                    error_quit("작업실패...");
               }
               break;
          }
          case '3' :  /* 금액별 유보율 */
          {
               EXEC SQL
               update  pkmgbmas a
                  set  holdrate = 
                               (
                               select  nvl(b.holdrate,0)
                                 from  pkcgbhol b
                                where  :holdkind = b.holdkind
                                  and  a.bonkind = b.bonkind
                                  and  (giveamt  >= amtfr and giveamt < amtto)
                               )
                where  bonyymm  = :bonyymm
                  and  bonkind  = :bonkind
                  and  (bonkind, :holdkind) in (select bonkind, holdkind
                                                  from  pkcgbhol);
                 
               if  (sqlca.sqlcode != 0) 
               {
                    print_errmsg(sqlca.sqlcode,"3.6.1 유보율 설정3");
                    sprintf(log_buff, "3.6.1 유보율 설정3"); /*dsa2000 Rexec 대체*/
                    Write_batlog(seqno++, log_buff);
                    error_quit("작업실패...");
               }
               break;
          }
          case '4' :  /* 직급+금액별 유보율 */
          {
               EXEC SQL
               update  pkmgbmas a
               set  holdrate = 
                                (
                                select  nvl(b.holdrate,0)
                                 from   pkcgbhol b
                                where   :holdkind = b.holdkind
                                  and   a.bonkind  = b.bonkind
                                  and   (a.paycl >= payclfr and a.paycl < payclto)
                                  and   (giveamt >= amtfr and giveamt < amtto)
                                )
               where  bonyymm = :bonyymm
                 and  bonkind  = :bonkind
                 and  (bonkind, :holdkind) in (select  bonkind, holdkind
                                                 from  pkcgbhol);
                 
               if  (sqlca.sqlcode != 0) 
               {
                    print_errmsg(sqlca.sqlcode,"3.6.1 유보율 설정4");
                    sprintf(log_buff, "3.6.1 유보율 설정4"); /*dsa2000 Rexec 대체*/
                    Write_batlog(seqno++, log_buff);
                    error_quit("작업실패...");
               }
          }
     }
   
     /* 3.6.2 유보액 설정 */
     EXEC SQL
     update  pkmgbmas
        set  holdamt = floor(giveamt * holdrate /100) +
             decode(:holdkind,'1',decode(:b_holdamt,0,0,:b_holdamt),0)
      where  bonyymm  = :bonyymm
        and  bonkind  = :bonkind;
     if  (sqlca.sqlcode != 0) 
     {
          print_errmsg(sqlca.sqlcode,"3.6.2 유보액 설정");
          sprintf(log_buff, "3.6.2 유보율 설정1"); /*dsa2000 Rexec 대체*/
          Write_batlog(seqno++, log_buff);
          error_quit("작업실패...");
     }
     
     /* 3.7 실지급액 설정 */
     EXEC SQL
     update  pkmgbmas
        set  realamt  = giveamt - holdamt
      where  bonyymm  = :bonyymm
        and  bonkind  = :bonkind;
     if  (sqlca.sqlcode != 0) 
     {
          print_errmsg(sqlca.sqlcode,"3.7 실지급액 설정");
          sprintf(log_buff, "3.7 실지급액 설정"); /*dsa2000 Rexec 대체*/
          Write_batlog(seqno++, log_buff);
          error_quit("작업실패...");
     }
}

/************************************************************
  시작일과 종료일까지의 기간을 일단위로 구하는 함수.  
 *************************************************************/
float  get_days(char *frdate, char *todate)
{
     EXEC SQL BEGIN DECLARE SECTION;
          char  t1_date[8+1] = "";
          char  t2_date[8+1] = "";
          float  result;
     EXEC SQL END DECLARE SECTION;
     
     sprintf(t1_date,"%s",frdate);
     sprintf(t2_date,"%s",todate);
     
     EXEC SQL
     SELECT  TO_DATE(:t2_date,'YYYYMMDD') - TO_DATE(:t1_date,'YYYYMMDD') + 1
       INTO  :result
       FROM  DUAL;
     
     return(result);
}

/*
void  make_report()
{
EXEC SQL BEGIN DECLARE SECTION;
  float  r_inwon;
  float  s_inwon;
  float  t_inwon;

  float  r_excnt;
  float  s_excnt;
  float  t_excnt;

  float  r_midcnt;
  float  s_midnt;
  float  t_midcnt;

  float  r_sucnt;
  float  s_sunt;
  float  t_sucnt;
  
  char  codename[20+1]  = "";
EXEC SQL END DECLARE SECTION;  

  
  EXEC SQL
  SELECT  codename
  INTO  :codename
  FROM  PYCODE
  WHERE  CODEID = 'K310' AND CODENO = :bonkind;
  if (sqlca.sqlcode != 0) {
   print_errmsg(sqlca.sqlcode,"상여구분코드 읽기오류");
   error_quit("작업실패...");
  }
  
  for (i=0; i<COL_END; i++) 
  {
   if (i >= COL_HOME)
     sprintf(msg+i,"=");
   else
     sprintf(msg+i," ");
  }
  printf("%s\n",msg);
  printf("%s\n",msg);

  for (i=0; i<COL_HOME; i++)
   sprintf(msg+i," ");
  sprintf(msg+i,"      <%.4s> 년 <%.2s> %20s  계산내역총계",bonyymm,bonyymm+4,codename);
  printf("%s\n",msg);
  for (i=0; i<COL_END; i++) 
  {
   if (i >= COL_HOME)
     sprintf(msg+i,"=");
   else
     sprintf(msg+i," ");
  }
  printf("%s\n",msg);
  printf("%s\n",msg);

  printf("\n\n",msg);
  

  printf("     1. 인원\n\n");
  for (i=0; i<COL_END; i++) 
  {
   if (i >= COL_HOME)
     sprintf(msg+i,"-");
   else
     sprintf(msg+i," ");
  }
  printf("%s\n",msg);

  for (i=0; i<COL_HOME; i++)
   sprintf(msg+i," ");
  sprintf(msg+i,");
  printf("%s\n",msg);
  for (i=0; i<COL_END; i++) 
  {
   if (i >= COL_HOME)
     sprintf(msg+i,"=");
   else
     sprintf(msg+i," ");
  }
  printf("%s\n",msg);
  printf("%s\n",msg);
  
}

*/


/*=== dsa2000 2004.11. Rexec대체 서비스를 위한 =====================================*/
int Write_batlog(int seqno, char *message)
{  
     EXEC SQL AT log_db 
     INSERT INTO PYBATLOG
     VALUES (:log_rundate, :log_progid, :seqno, :log_writeman, :message);

     if ((sqlca.sqlcode != 1403) && (sqlca.sqlcode != 0)) 
     {  
          printf("ERROR_CODE : %d, pybatlog Insert Error. \n", sqlca.sqlcode);   
          return(FAILURE);
     }                        
                        
     EXEC SQL AT log_db COMMIT WORK ;  
}
