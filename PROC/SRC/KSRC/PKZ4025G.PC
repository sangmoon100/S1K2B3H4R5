/* ======================= Program Header ======================================
 PROGRAM-NAME   : pkz4025g(임원 퇴직자 공제금 계산)
 SYSTEM-NAME    : 급여
 SUBSYSTEM-NAME : 임원 퇴직정산
 Programmer     : 강륜종
 Version        : 1.00
 Date           : 2008.12

Update Contents
   Version    date(yy.mm.dd)   programmer   description     relevant doc.no
     1.00     2008.12          강륜종       최초개발본      pkq2074g.pc 기반으로 생성.
======================================================================================== */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <time.h>
#include "hinsa_macro.h"
#include "hinsa_string.h"
#include "hinsa_date.h"
#include "hinsa_log.h"
#include "hinsa_oracle.h"
#include "hinsa_common.h"

#define  FAIL        -2

EXEC SQL INCLUDE sqlca;
EXEC SQL BEGIN DECLARE SECTION;
  char  workyymmdd[9];
  char  empno[5];
  char  retdate[9];
  int   remamt;
  int   hsint;
  int   days;
  int   hstot;
  int   hssrt;
  int   hslong;
  char  replyymmdd[9];
EXEC SQL END   DECLARE SECTION;

FILE *fp=stdout;

int    id;
double rate[14];
char   log_rundate[16]     = ""; 
char   log_progid[16]      = "";
char   log_writeman[5]     = "";
char   log_buff[100]       = "";
char   calcempno[5]        = "";
int    seqno = 0; 

void main(argc,argv)
int  argc;
char *argv[];
{   
   char FL_file[255];
   
   if (argc != 5) {  /* /hper/insa/HINSA/proc/bin/Kbin/pkz4025g D006 pkz4025g M112 2008123100000 */
            printf("[Usage] : pkz4025g  1.작업자사번 2.프로그램ID 3.특정사번만 계산시 사번 4.시작시간 \n");  
            exit(1);
   }  
   
   /*로그 디렉토리 생성 및 로그작업 */
   STRINIT(FL_file);
   strcpy(FL_file,"pkz4025g");
   
   hinsa_get_filename(1, FL_file);
   if (hinsa_log_open(FL_file) == FAILURE)
   {
        hinsa_exit(0,"로그파일 생성에러로 인한 프로그램 종료...");
        return;
   }
       
   hinsa_log_print(0,"퇴직자 공제금 계산 시작...");                
   hinsa_db_connect();  /*DB Connect 실시..*/
   
   strcpy(log_writeman, argv[1]);
   strcpy(log_progid,   argv[2]);
   strcpy(calcempno,    argv[3]);
   strcpy(log_rundate,  argv[4]);   
     
   EXEC SQL DECLARE log_db DATABASE;    
   hinsa_log_db_connect();
   /*========================================================*/
   
   SetRate();
   
   CalcRetAmt();
   
   /* hinsa_exit()에서 DB Commit & DB접속종료함.*/
   if ( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
   {
        sprintf(log_buff, "ERROR ====== [작업 실패] =====");
        Write_batlog(seqno++, log_buff);   
        error_quit("ERROR ====== [작업 실패] =====\n");
   }
   else  
   {
        sprintf(log_buff, "OK ====== [퇴직금 공제액 작업성공] =====");
        Write_batlog(seqno++, log_buff); 
        hinsa_exit(0,"OK ====== [퇴직금 공제액 작업성공] =====");
   }
}


SetRate()
{
  rate[12] = 0.0;
  rate[11] = 1.5;
  rate[10] = 2.0;
  rate[9]  = 2.5;
  rate[8]  = 4.0;
  rate[7]  = 4.5;
  rate[6]  = 5.0;
  rate[5]  = 6.5;
  rate[4]  = 7.0;
  rate[3]  = 7.5;
  rate[2]  = 9.0;
  rate[1]  = 9.5;
  rate[0]  = 0.0;
}

err_print(errcode,str)
int errcode;
char *str;
{
    fprintf(fp,"[ERRCODE : %d] %s\n",errcode,str);
}

CalcRetAmt()
{
     int  mm;
     char smm[3];
     
     EXEC SQL DECLARE c1 CURSOR FOR
     SELECT empno, retdate
       FROM PKZRTMAS;
     
     EXEC SQL open  c1 ;
     
     if (sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
     {  
         err_print(sqlca.sqlcode,"1. 퇴직일 Read Error");
         sprintf(log_buff, "1. 퇴직일 Read Error");
         Write_batlog(seqno++, log_buff); 
         exit(1);
     }
     
     while(1)
     {
          EXEC SQL FETCH c1 
          INTO :empno,:retdate;
          
          if (sqlca.sqlcode == 1403 )
          {
              EXEC SQL close c1;
              break;
          }
          
          remamt = 0;
          memset(replyymmdd,'\0',sizeof(replyymmdd));
          memset(smm,'\0',sizeof(smm));
          
          /* 설정값 초기화 */
          EXEC  SQL
          UPDATE PKZRTMAS
             SET hsrem = 0,  hsint = 0,  hssrt = 0,  hslong= 0, hsamt = 0
           WHERE empno = :empno;
          
          EXEC  SQL
          SELECT sum(hsamt), sum(remsum), max(repldate)
            INTO :hstot, :remamt, :replyymmdd
            FROM PKMHSMAS
           WHERE empno = :empno;
           
          if ( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403 && sqlca.sqlcode != -1405)
          {  
             err_print(sqlca.sqlcode,"2. 주택자금 자료 read Error");
             sprintf(log_buff, "2. 주택자금 자료 read Error");
             Write_batlog(seqno++, log_buff); 
             exit(1);
          }
          
          if (remamt > 0)
          {
             /* =================================  debug 
             printf("~~~~~~~[%10d]%s\n",remamt,empno);   debug */
             
             sprintf(replyymmdd,"%8s",replyymmdd);
             memset(smm,'\0',sizeof(smm));
             sprintf(smm,"%.2s",replyymmdd+4);
             mm = atoi(smm);
             
             EXEC  SQL
             SELECT to_date(:retdate,'YYYYMMDD') - to_date(:replyymmdd,'YYYYMMDD')
               INTO :days
               FROM dual;
             
             if (days < 0)
                 days = 0;
             
             hsint = remamt * days / 365 * 0.02;
             
             hssrt = hstot * rate[mm] / 100;
             
             if (remamt - hssrt < 0 )
             {
               hssrt = remamt;
             }
             
             hslong = remamt - hssrt; 
             
             EXEC  SQL
             UPDATE PKZRTMAS
                SET hsrem  = :remamt, 
                    hsint  = :hsint, 
                    hssrt  = :hssrt,  
                    hslong = :hslong,
                    hsamt  = :remamt + :hsint
              WHERE empno  = :empno;
              
             if ( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
             {  
                err_print(sqlca.sqlcode,"3. 주택자금 setting Error");
                sprintf(log_buff, "3. 주택자금 setting Error");
                Write_batlog(seqno++, log_buff); 
                exit(1);
             }
          }    
          
          /*2001-01-30 중간정산이력의 기산일을 최대값을 불러온다
          EXEC SQL
          UPDATE  PKZRTMAS p
             SET  ANUDAMT = (SELECT SUM(NPSAMT)
                               FROM PKZINSHIS R,
                                     (select empno mrempno, max(mrtodate) maxmrtodate  
                                        from PKHMRHIS 
                                       group by empno) 
                              WHERE r.empno = :empno
                                AND PAYDATE <='199903'
                                AND PAYDATE > SUBSTR(maxmrtodate,1,6)
                                AND R.EMPNO = mrempno
                             )
           WHERE  empno = :empno
             AND  EMPNO IN ( SELECT EMPNO FROM PKHMRHIS B 
                              WHERE P.EMPNO = B.EMPNO    );
                              
          if ( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403 )
          {  
             err_print(sqlca.sqlcode,"5. 국민연금 setting Error - 중간정산 받은경우");
             sprintf(log_buff, "5. 국민연금 setting Error - 중간정산 받은경우");
             Write_batlog(seqno++, log_buff); 
             exit(1);
          }  
          
          EXEC SQL
          UPDATE  PKZRTMAS p
             SET  ANUDAMT = (SELECT SUM(NPSAMT)
                               FROM PKZINSHIS R
                              WHERE r.empno = :empno
                                AND PAYDATE <= '199903'
                            )
           WHERE  empno = :empno
             AND  EMPNO NOT IN ( SELECT EMPNO FROM PKHMRHIS B  );
             
          if ( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
          {  
             err_print(sqlca.sqlcode,"5. 국민연금 setting Error - 중간정산 안 받은 경우");
             sprintf(log_buff, "5. 국민연금 setting Error - 중간정산 안 받은경우");
             Write_batlog(seqno++, log_buff); 
             exit(1);
          } */
          
          /* Dsa2000  2003.11.25.   사번변경자를 위하여... 중간정산을 받은 사번변경자는 국민연금전환금을 0 으로 Setting..
          EXEC SQL
          Update PKZRTMAS A 
             Set ANUDAMT = (Select 0 From Pkzrthis B Where A.juminid = B.juminid)
           Where Juminid in (Select Juminid From Pkzrthis)
             And EMPNO Like :calcempno;
             
          if ( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
          {  
             err_print(sqlca.sqlcode,"5. 국민연금 setting Error - 사번변경자 경우");
             sprintf(log_buff, "5. 국민연금 setting Error - 사번변경자 경우");
             Write_batlog(seqno++, log_buff); 
             exit(1);
          }    */
     }
  
     /* ===================================================================================start
       etcamt:기타대출을 퇴직월 기타공제로 전용
     * ======================================================================================== */
     EXEC  SQL
     UPDATE  PKZRTMAS
        SET  HSAMT     = NVL(HSAMT,0),
             SACORPAMT = NVL(SACORPAMT,0),
             SABANKAMT = NVL(SABANKAMT,0),
             SANGAMT   = NVL(SANGAMT,0),
             ANUDAMT   = NVL(ANUDAMT,0)
      Where  EMPNO Like :calcempno;
      
     if ( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
     {  
          err_print(sqlca.sqlcode,"6. NULL값 치환  setting Error");
          sprintf(log_buff, "6. NULL값 치환  setting Error");
          Write_batlog(seqno++, log_buff); 
          exit(1);
     }
     
     EXEC  SQL
     UPDATE PKZRTMAS
        SET LOANSUM = HSAMT + SACORPAMT + SABANKAMT + SANGAMT
      Where EMPNO Like :calcempno;  
      
     if ( sqlca.sqlcode != 0 && sqlca.sqlcode != 1403)
     {  
         err_print(sqlca.sqlcode,"6. 공제금 합  setting Error");
         sprintf(log_buff, "6. 공제금 합  setting Error");
         Write_batlog(seqno++, log_buff); 
         exit(1);
     }
}

/*=== dsa2000 2004.11. Rexec대체 서비스를 위한 =====================================*/
int Write_batlog(int seqno, char *message)
{  
     EXEC SQL AT log_db 
     INSERT INTO PYBATLOG
     VALUES (:log_rundate, :log_progid, :seqno, :log_writeman, :message);

     if ((sqlca.sqlcode != 1403) && (sqlca.sqlcode != 0)) 
     {  
          printf("ERROR_CODE : %d, pybatlog Insert Error. \n", sqlca.sqlcode);    
          return(FAIL);
     }                        
                        
     EXEC SQL AT log_db COMMIT WORK ;  
}
